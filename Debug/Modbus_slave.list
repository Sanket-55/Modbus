
Modbus_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08002bcc  08002bcc  00003bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e78  08002e78  0000408c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e78  08002e78  0000408c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e78  08002e78  0000408c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e78  08002e78  00003e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e7c  08002e7c  00003e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08002e80  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000008c  08002f0c  0000408c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08002f0c  000042f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b40  00000000  00000000  000040b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000186b  00000000  00000000  0000bbf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0000d460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000055c  00000000  00000000  0000db68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a1b  00000000  00000000  0000e0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093f0  00000000  00000000  00024adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081812  00000000  00000000  0002decf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af6e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ad0  00000000  00000000  000af724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b11f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bb4 	.word	0x08002bb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08002bb4 	.word	0x08002bb4

0800014c <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1)
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a2a      	ldr	r2, [pc, #168]	@ (8000208 <HAL_UARTEx_RxEventCallback+0xbc>)
 800015e:	4293      	cmp	r3, r2
 8000160:	d14d      	bne.n	80001fe <HAL_UARTEx_RxEventCallback+0xb2>
    {
        if (RxData[0] == SLAVE_ID)
 8000162:	4b2a      	ldr	r3, [pc, #168]	@ (800020c <HAL_UARTEx_RxEventCallback+0xc0>)
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	2b07      	cmp	r3, #7
 8000168:	d143      	bne.n	80001f2 <HAL_UARTEx_RxEventCallback+0xa6>
        {
            switch (RxData[1])
 800016a:	4b28      	ldr	r3, [pc, #160]	@ (800020c <HAL_UARTEx_RxEventCallback+0xc0>)
 800016c:	785b      	ldrb	r3, [r3, #1]
 800016e:	3b01      	subs	r3, #1
 8000170:	2b0f      	cmp	r3, #15
 8000172:	d83a      	bhi.n	80001ea <HAL_UARTEx_RxEventCallback+0x9e>
 8000174:	a201      	add	r2, pc, #4	@ (adr r2, 800017c <HAL_UARTEx_RxEventCallback+0x30>)
 8000176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800017a:	bf00      	nop
 800017c:	080001bd 	.word	0x080001bd
 8000180:	080001c3 	.word	0x080001c3
 8000184:	080001c9 	.word	0x080001c9
 8000188:	080001cf 	.word	0x080001cf
 800018c:	080001d5 	.word	0x080001d5
 8000190:	080001db 	.word	0x080001db
 8000194:	080001eb 	.word	0x080001eb
 8000198:	080001eb 	.word	0x080001eb
 800019c:	080001eb 	.word	0x080001eb
 80001a0:	080001eb 	.word	0x080001eb
 80001a4:	080001eb 	.word	0x080001eb
 80001a8:	080001eb 	.word	0x080001eb
 80001ac:	080001eb 	.word	0x080001eb
 80001b0:	080001eb 	.word	0x080001eb
 80001b4:	080001e1 	.word	0x080001e1
 80001b8:	080001e5 	.word	0x080001e5
            {
            	case 0x01:  // read coils
            		readCoils();
 80001bc:	f000 fa52 	bl	8000664 <readCoils>
            		break;
 80001c0:	e017      	b.n	80001f2 <HAL_UARTEx_RxEventCallback+0xa6>
            	case 0x02:   // read Discrete inputs
            		readInputs();
 80001c2:	f000 fafd 	bl	80007c0 <readInputs>
            		break;
 80001c6:	e014      	b.n	80001f2 <HAL_UARTEx_RxEventCallback+0xa6>
                case 0x03:
                    readHoldingRegs(); //Read the holding resistor
 80001c8:	f000 f91e 	bl	8000408 <readHoldingRegs>
                    break;
 80001cc:	e011      	b.n	80001f2 <HAL_UARTEx_RxEventCallback+0xa6>
                case 0x04:
                    readInputRegs(); // Read the input resistor
 80001ce:	f000 f98d 	bl	80004ec <readInputRegs>
                    break;
 80001d2:	e00e      	b.n	80001f2 <HAL_UARTEx_RxEventCallback+0xa6>
                case 0x05:
                    writeSingleCoil();
 80001d4:	f000 fc1e 	bl	8000a14 <writeSingleCoil>
                    break;
 80001d8:	e00b      	b.n	80001f2 <HAL_UARTEx_RxEventCallback+0xa6>
                case 0x06:
                	WriteSingleHoldingRegs(); // write single Holding Resistor
 80001da:	f000 f9f9 	bl	80005d0 <WriteSingleHoldingRegs>
                	break;
 80001de:	e008      	b.n	80001f2 <HAL_UARTEx_RxEventCallback+0xa6>
                case 0x0F:
                	writeMultiCoils();
 80001e0:	f000 fc92 	bl	8000b08 <writeMultiCoils>
                case 0x10:
                	writeMultipleHoldingRegs();
 80001e4:	f000 fb9a 	bl	800091c <writeMultipleHoldingRegs>
                	break;
 80001e8:	e003      	b.n	80001f2 <HAL_UARTEx_RxEventCallback+0xa6>
                default:
                	modbusException(ILLEGAL_FUNCTION);// Handle unknown command or error
 80001ea:	2001      	movs	r0, #1
 80001ec:	f000 f8ec 	bl	80003c8 <modbusException>
                    break;
 80001f0:	bf00      	nop
            }
        }
        HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 256);
 80001f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80001f6:	4905      	ldr	r1, [pc, #20]	@ (800020c <HAL_UARTEx_RxEventCallback+0xc0>)
 80001f8:	4805      	ldr	r0, [pc, #20]	@ (8000210 <HAL_UARTEx_RxEventCallback+0xc4>)
 80001fa:	f001 feea 	bl	8001fd2 <HAL_UARTEx_ReceiveToIdle_IT>
    }
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40013800 	.word	0x40013800
 800020c:	200000f0 	.word	0x200000f0
 8000210:	200000a8 	.word	0x200000a8

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000218:	f000 fe4a 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021c:	f000 f810 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000220:	f000 f87e 	bl	8000320 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000224:	f000 f852 	bl	80002cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 256);
 8000228:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800022c:	4902      	ldr	r1, [pc, #8]	@ (8000238 <main+0x24>)
 800022e:	4803      	ldr	r0, [pc, #12]	@ (800023c <main+0x28>)
 8000230:	f001 fecf 	bl	8001fd2 <HAL_UARTEx_ReceiveToIdle_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	bf00      	nop
 8000236:	e7fd      	b.n	8000234 <main+0x20>
 8000238:	200000f0 	.word	0x200000f0
 800023c:	200000a8 	.word	0x200000a8

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b090      	sub	sp, #64	@ 0x40
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	2228      	movs	r2, #40	@ 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fc84 	bl	8002b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000262:	2301      	movs	r3, #1
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000266:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800026a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000274:	2302      	movs	r3, #2
 8000276:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000278:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800027c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4618      	mov	r0, r3
 800028a:	f001 f9b7 	bl	80015fc <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000294:	f000 f866 	bl	8000364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2302      	movs	r3, #2
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 fc24 	bl	8001b00 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002be:	f000 f851 	bl	8000364 <Error_Handler>
  }
}
 80002c2:	bf00      	nop
 80002c4:	3740      	adds	r7, #64	@ 0x40
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002d0:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002d2:	4a12      	ldr	r2, [pc, #72]	@ (800031c <MX_USART1_UART_Init+0x50>)
 80002d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002d6:	4b10      	ldr	r3, [pc, #64]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80002dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002de:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002f0:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002f2:	220c      	movs	r2, #12
 80002f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f6:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002fc:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000302:	4805      	ldr	r0, [pc, #20]	@ (8000318 <MX_USART1_UART_Init+0x4c>)
 8000304:	f001 fd8a 	bl	8001e1c <HAL_UART_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800030e:	f000 f829 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	200000a8 	.word	0x200000a8
 800031c:	40013800 	.word	0x40013800

08000320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000326:	4b0e      	ldr	r3, [pc, #56]	@ (8000360 <MX_GPIO_Init+0x40>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a0d      	ldr	r2, [pc, #52]	@ (8000360 <MX_GPIO_Init+0x40>)
 800032c:	f043 0320 	orr.w	r3, r3, #32
 8000330:	6193      	str	r3, [r2, #24]
 8000332:	4b0b      	ldr	r3, [pc, #44]	@ (8000360 <MX_GPIO_Init+0x40>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f003 0320 	and.w	r3, r3, #32
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b08      	ldr	r3, [pc, #32]	@ (8000360 <MX_GPIO_Init+0x40>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a07      	ldr	r2, [pc, #28]	@ (8000360 <MX_GPIO_Init+0x40>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b05      	ldr	r3, [pc, #20]	@ (8000360 <MX_GPIO_Init+0x40>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0304 	and.w	r3, r3, #4
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000

08000364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
}
 800036a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <Error_Handler+0x8>

08000370 <sendData>:
		0b01010101, 0b00111100, 0b00001111, 0b11110000, 0b10001111,    // 120-159 10121-10160
		0b01010100, 0b10011001, 0b11111000, 0b00001101, 0b00101010,    // 160-199 10161-10200
};

void sendData (uint8_t *data, int size)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	b29b      	uxth	r3, r3
 800037e:	4619      	mov	r1, r3
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f000 fc77 	bl	8000c74 <crc16>
 8000386:	4603      	mov	r3, r0
 8000388:	81fb      	strh	r3, [r7, #14]
	data[size] = crc&0xFF;   // CRC LOW
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	4413      	add	r3, r2
 8000390:	89fa      	ldrh	r2, [r7, #14]
 8000392:	b2d2      	uxtb	r2, r2
 8000394:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8000396:	89fb      	ldrh	r3, [r7, #14]
 8000398:	0a1b      	lsrs	r3, r3, #8
 800039a:	b299      	uxth	r1, r3
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	3301      	adds	r3, #1
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	4413      	add	r3, r2
 80003a4:	b2ca      	uxtb	r2, r1
 80003a6:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, data, size+2, 1000);
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	3302      	adds	r3, #2
 80003ae:	b29a      	uxth	r2, r3
 80003b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003b4:	6879      	ldr	r1, [r7, #4]
 80003b6:	4803      	ldr	r0, [pc, #12]	@ (80003c4 <sendData+0x54>)
 80003b8:	f001 fd80 	bl	8001ebc <HAL_UART_Transmit>
}
 80003bc:	bf00      	nop
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	200000a8 	.word	0x200000a8

080003c8 <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	TxData[0] = RxData[0];       // slave ID
 80003d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000400 <modbusException+0x38>)
 80003d4:	781a      	ldrb	r2, [r3, #0]
 80003d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <modbusException+0x3c>)
 80003d8:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1]|0x80;  // adding 1 to the MSB of the function code
 80003da:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <modbusException+0x38>)
 80003dc:	785b      	ldrb	r3, [r3, #1]
 80003de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	4b07      	ldr	r3, [pc, #28]	@ (8000404 <modbusException+0x3c>)
 80003e6:	705a      	strb	r2, [r3, #1]
	TxData[2] = exceptioncode;   // Load the Exception code
 80003e8:	4a06      	ldr	r2, [pc, #24]	@ (8000404 <modbusException+0x3c>)
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	7093      	strb	r3, [r2, #2]
	sendData(TxData, 3);         // send Data... CRC will be calculated in the function
 80003ee:	2103      	movs	r1, #3
 80003f0:	4804      	ldr	r0, [pc, #16]	@ (8000404 <modbusException+0x3c>)
 80003f2:	f7ff ffbd 	bl	8000370 <sendData>
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	200000f0 	.word	0x200000f0
 8000404:	200001f0 	.word	0x200001f0

08000408 <readHoldingRegs>:


uint8_t readHoldingRegs (void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 800040e:	4b34      	ldr	r3, [pc, #208]	@ (80004e0 <readHoldingRegs+0xd8>)
 8000410:	789b      	ldrb	r3, [r3, #2]
 8000412:	021b      	lsls	r3, r3, #8
 8000414:	b21a      	sxth	r2, r3
 8000416:	4b32      	ldr	r3, [pc, #200]	@ (80004e0 <readHoldingRegs+0xd8>)
 8000418:	78db      	ldrb	r3, [r3, #3]
 800041a:	b21b      	sxth	r3, r3
 800041c:	4313      	orrs	r3, r2
 800041e:	b21b      	sxth	r3, r3
 8000420:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8000422:	4b2f      	ldr	r3, [pc, #188]	@ (80004e0 <readHoldingRegs+0xd8>)
 8000424:	791b      	ldrb	r3, [r3, #4]
 8000426:	021b      	lsls	r3, r3, #8
 8000428:	b21a      	sxth	r2, r3
 800042a:	4b2d      	ldr	r3, [pc, #180]	@ (80004e0 <readHoldingRegs+0xd8>)
 800042c:	795b      	ldrb	r3, [r3, #5]
 800042e:	b21b      	sxth	r3, r3
 8000430:	4313      	orrs	r3, r2
 8000432:	b21b      	sxth	r3, r3
 8000434:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8000436:	887b      	ldrh	r3, [r7, #2]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d002      	beq.n	8000442 <readHoldingRegs+0x3a>
 800043c:	887b      	ldrh	r3, [r7, #2]
 800043e:	2b7d      	cmp	r3, #125	@ 0x7d
 8000440:	d904      	bls.n	800044c <readHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000442:	2003      	movs	r0, #3
 8000444:	f7ff ffc0 	bl	80003c8 <modbusException>
		return 0;
 8000448:	2300      	movs	r3, #0
 800044a:	e044      	b.n	80004d6 <readHoldingRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 800044c:	89fa      	ldrh	r2, [r7, #14]
 800044e:	887b      	ldrh	r3, [r7, #2]
 8000450:	4413      	add	r3, r2
 8000452:	b29b      	uxth	r3, r3
 8000454:	3b01      	subs	r3, #1
 8000456:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)
 8000458:	883b      	ldrh	r3, [r7, #0]
 800045a:	2b31      	cmp	r3, #49	@ 0x31
 800045c:	d904      	bls.n	8000468 <readHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800045e:	2002      	movs	r0, #2
 8000460:	f7ff ffb2 	bl	80003c8 <modbusException>
		return 0;
 8000464:	2300      	movs	r3, #0
 8000466:	e036      	b.n	80004d6 <readHoldingRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 8000468:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <readHoldingRegs+0xdc>)
 800046a:	2207      	movs	r2, #7
 800046c:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 800046e:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <readHoldingRegs+0xd8>)
 8000470:	785a      	ldrb	r2, [r3, #1]
 8000472:	4b1c      	ldr	r3, [pc, #112]	@ (80004e4 <readHoldingRegs+0xdc>)
 8000474:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 8000476:	887b      	ldrh	r3, [r7, #2]
 8000478:	b2db      	uxtb	r3, r3
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	b2da      	uxtb	r2, r3
 800047e:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <readHoldingRegs+0xdc>)
 8000480:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8000482:	2303      	movs	r3, #3
 8000484:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8000486:	2300      	movs	r3, #0
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	e01b      	b.n	80004c4 <readHoldingRegs+0xbc>
	{
		TxData[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 800048c:	89fb      	ldrh	r3, [r7, #14]
 800048e:	4a16      	ldr	r2, [pc, #88]	@ (80004e8 <readHoldingRegs+0xe0>)
 8000490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000494:	0a1b      	lsrs	r3, r3, #8
 8000496:	b299      	uxth	r1, r3
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	1c5a      	adds	r2, r3, #1
 800049c:	60ba      	str	r2, [r7, #8]
 800049e:	b2c9      	uxtb	r1, r1
 80004a0:	4a10      	ldr	r2, [pc, #64]	@ (80004e4 <readHoldingRegs+0xdc>)
 80004a2:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 80004a4:	89fb      	ldrh	r3, [r7, #14]
 80004a6:	4a10      	ldr	r2, [pc, #64]	@ (80004e8 <readHoldingRegs+0xe0>)
 80004a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	1c5a      	adds	r2, r3, #1
 80004b0:	60ba      	str	r2, [r7, #8]
 80004b2:	b2c9      	uxtb	r1, r1
 80004b4:	4a0b      	ldr	r2, [pc, #44]	@ (80004e4 <readHoldingRegs+0xdc>)
 80004b6:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 80004b8:	89fb      	ldrh	r3, [r7, #14]
 80004ba:	3301      	adds	r3, #1
 80004bc:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3301      	adds	r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	887b      	ldrh	r3, [r7, #2]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	dbdf      	blt.n	800048c <readHoldingRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 80004cc:	68b9      	ldr	r1, [r7, #8]
 80004ce:	4805      	ldr	r0, [pc, #20]	@ (80004e4 <readHoldingRegs+0xdc>)
 80004d0:	f7ff ff4e 	bl	8000370 <sendData>
	return 1;   // success
 80004d4:	2301      	movs	r3, #1
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	200000f0 	.word	0x200000f0
 80004e4:	200001f0 	.word	0x200001f0
 80004e8:	20000000 	.word	0x20000000

080004ec <readInputRegs>:

uint8_t readInputRegs (void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 80004f2:	4b34      	ldr	r3, [pc, #208]	@ (80005c4 <readInputRegs+0xd8>)
 80004f4:	789b      	ldrb	r3, [r3, #2]
 80004f6:	021b      	lsls	r3, r3, #8
 80004f8:	b21a      	sxth	r2, r3
 80004fa:	4b32      	ldr	r3, [pc, #200]	@ (80005c4 <readInputRegs+0xd8>)
 80004fc:	78db      	ldrb	r3, [r3, #3]
 80004fe:	b21b      	sxth	r3, r3
 8000500:	4313      	orrs	r3, r2
 8000502:	b21b      	sxth	r3, r3
 8000504:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8000506:	4b2f      	ldr	r3, [pc, #188]	@ (80005c4 <readInputRegs+0xd8>)
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	021b      	lsls	r3, r3, #8
 800050c:	b21a      	sxth	r2, r3
 800050e:	4b2d      	ldr	r3, [pc, #180]	@ (80005c4 <readInputRegs+0xd8>)
 8000510:	795b      	ldrb	r3, [r3, #5]
 8000512:	b21b      	sxth	r3, r3
 8000514:	4313      	orrs	r3, r2
 8000516:	b21b      	sxth	r3, r3
 8000518:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 800051a:	887b      	ldrh	r3, [r7, #2]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d002      	beq.n	8000526 <readInputRegs+0x3a>
 8000520:	887b      	ldrh	r3, [r7, #2]
 8000522:	2b7d      	cmp	r3, #125	@ 0x7d
 8000524:	d904      	bls.n	8000530 <readInputRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000526:	2003      	movs	r0, #3
 8000528:	f7ff ff4e 	bl	80003c8 <modbusException>
		return 0;
 800052c:	2300      	movs	r3, #0
 800052e:	e044      	b.n	80005ba <readInputRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8000530:	89fa      	ldrh	r2, [r7, #14]
 8000532:	887b      	ldrh	r3, [r7, #2]
 8000534:	4413      	add	r3, r2
 8000536:	b29b      	uxth	r3, r3
 8000538:	3b01      	subs	r3, #1
 800053a:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)
 800053c:	883b      	ldrh	r3, [r7, #0]
 800053e:	2b31      	cmp	r3, #49	@ 0x31
 8000540:	d904      	bls.n	800054c <readInputRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000542:	2002      	movs	r0, #2
 8000544:	f7ff ff40 	bl	80003c8 <modbusException>
		return 0;
 8000548:	2300      	movs	r3, #0
 800054a:	e036      	b.n	80005ba <readInputRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 800054c:	4b1e      	ldr	r3, [pc, #120]	@ (80005c8 <readInputRegs+0xdc>)
 800054e:	2207      	movs	r2, #7
 8000550:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8000552:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <readInputRegs+0xd8>)
 8000554:	785a      	ldrb	r2, [r3, #1]
 8000556:	4b1c      	ldr	r3, [pc, #112]	@ (80005c8 <readInputRegs+0xdc>)
 8000558:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 800055a:	887b      	ldrh	r3, [r7, #2]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <readInputRegs+0xdc>)
 8000564:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8000566:	2303      	movs	r3, #3
 8000568:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	e01b      	b.n	80005a8 <readInputRegs+0xbc>
	{
		TxData[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8000570:	89fb      	ldrh	r3, [r7, #14]
 8000572:	4a16      	ldr	r2, [pc, #88]	@ (80005cc <readInputRegs+0xe0>)
 8000574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000578:	0a1b      	lsrs	r3, r3, #8
 800057a:	b299      	uxth	r1, r3
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	60ba      	str	r2, [r7, #8]
 8000582:	b2c9      	uxtb	r1, r1
 8000584:	4a10      	ldr	r2, [pc, #64]	@ (80005c8 <readInputRegs+0xdc>)
 8000586:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	4a10      	ldr	r2, [pc, #64]	@ (80005cc <readInputRegs+0xe0>)
 800058c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	1c5a      	adds	r2, r3, #1
 8000594:	60ba      	str	r2, [r7, #8]
 8000596:	b2c9      	uxtb	r1, r1
 8000598:	4a0b      	ldr	r2, [pc, #44]	@ (80005c8 <readInputRegs+0xdc>)
 800059a:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 800059c:	89fb      	ldrh	r3, [r7, #14]
 800059e:	3301      	adds	r3, #1
 80005a0:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	3301      	adds	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	887b      	ldrh	r3, [r7, #2]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbdf      	blt.n	8000570 <readInputRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 80005b0:	68b9      	ldr	r1, [r7, #8]
 80005b2:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <readInputRegs+0xdc>)
 80005b4:	f7ff fedc 	bl	8000370 <sendData>
	return 1;   // success
 80005b8:	2301      	movs	r3, #1
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000f0 	.word	0x200000f0
 80005c8:	200001f0 	.word	0x200001f0
 80005cc:	08002bcc 	.word	0x08002bcc

080005d0 <WriteSingleHoldingRegs>:

uint8_t WriteSingleHoldingRegs(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 80005d6:	4b20      	ldr	r3, [pc, #128]	@ (8000658 <WriteSingleHoldingRegs+0x88>)
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	021b      	lsls	r3, r3, #8
 80005dc:	b21a      	sxth	r2, r3
 80005de:	4b1e      	ldr	r3, [pc, #120]	@ (8000658 <WriteSingleHoldingRegs+0x88>)
 80005e0:	78db      	ldrb	r3, [r3, #3]
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	80fb      	strh	r3, [r7, #6]

		if (startAddr>49)  // The Register Address can not be more than 3 as we only have record of 4 Registers in total
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	2b31      	cmp	r3, #49	@ 0x31
 80005ee:	d904      	bls.n	80005fa <WriteSingleHoldingRegs+0x2a>
		{
			modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80005f0:	2002      	movs	r0, #2
 80005f2:	f7ff fee9 	bl	80003c8 <modbusException>
			return 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e029      	b.n	800064e <WriteSingleHoldingRegs+0x7e>
		}
		/* Save the 16 bit data
			 * Data is the combination of 2 bytes, RxData[4] and RxData[5]
			 */

		Holding_Registers_Database[startAddr] = (RxData[4]<<8)|RxData[5];
 80005fa:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <WriteSingleHoldingRegs+0x88>)
 80005fc:	791b      	ldrb	r3, [r3, #4]
 80005fe:	021b      	lsls	r3, r3, #8
 8000600:	b21a      	sxth	r2, r3
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <WriteSingleHoldingRegs+0x88>)
 8000604:	795b      	ldrb	r3, [r3, #5]
 8000606:	b21b      	sxth	r3, r3
 8000608:	4313      	orrs	r3, r2
 800060a:	b21a      	sxth	r2, r3
 800060c:	88fb      	ldrh	r3, [r7, #6]
 800060e:	b291      	uxth	r1, r2
 8000610:	4a12      	ldr	r2, [pc, #72]	@ (800065c <WriteSingleHoldingRegs+0x8c>)
 8000612:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]



		TxData[0] = SLAVE_ID;    // slave id
 8000616:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <WriteSingleHoldingRegs+0x90>)
 8000618:	2207      	movs	r2, #7
 800061a:	701a      	strb	r2, [r3, #0]
		TxData[1] = RxData[1];   // function code
 800061c:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <WriteSingleHoldingRegs+0x88>)
 800061e:	785a      	ldrb	r2, [r3, #1]
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <WriteSingleHoldingRegs+0x90>)
 8000622:	705a      	strb	r2, [r3, #1]
		TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <WriteSingleHoldingRegs+0x88>)
 8000626:	789a      	ldrb	r2, [r3, #2]
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <WriteSingleHoldingRegs+0x90>)
 800062a:	709a      	strb	r2, [r3, #2]
		TxData[3] = RxData[3];   // Start Addr LOW Byte
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <WriteSingleHoldingRegs+0x88>)
 800062e:	78da      	ldrb	r2, [r3, #3]
 8000630:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <WriteSingleHoldingRegs+0x90>)
 8000632:	70da      	strb	r2, [r3, #3]
		TxData[4] = RxData[4];   // Reg Data HIGH Byte
 8000634:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <WriteSingleHoldingRegs+0x88>)
 8000636:	791a      	ldrb	r2, [r3, #4]
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <WriteSingleHoldingRegs+0x90>)
 800063a:	711a      	strb	r2, [r3, #4]
		TxData[5] = RxData[5];   // Reg Data LOW  Byte
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <WriteSingleHoldingRegs+0x88>)
 800063e:	795a      	ldrb	r2, [r3, #5]
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <WriteSingleHoldingRegs+0x90>)
 8000642:	715a      	strb	r2, [r3, #5]

		sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8000644:	2106      	movs	r1, #6
 8000646:	4806      	ldr	r0, [pc, #24]	@ (8000660 <WriteSingleHoldingRegs+0x90>)
 8000648:	f7ff fe92 	bl	8000370 <sendData>


		return 1;   // success
 800064c:	2301      	movs	r3, #1

}
 800064e:	4618      	mov	r0, r3
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200000f0 	.word	0x200000f0
 800065c:	20000000 	.word	0x20000000
 8000660:	200001f0 	.word	0x200001f0

08000664 <readCoils>:

uint8_t readCoils (void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 800066a:	4b52      	ldr	r3, [pc, #328]	@ (80007b4 <readCoils+0x150>)
 800066c:	789b      	ldrb	r3, [r3, #2]
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	b21a      	sxth	r2, r3
 8000672:	4b50      	ldr	r3, [pc, #320]	@ (80007b4 <readCoils+0x150>)
 8000674:	78db      	ldrb	r3, [r3, #3]
 8000676:	b21b      	sxth	r3, r3
 8000678:	4313      	orrs	r3, r2
 800067a:	b21b      	sxth	r3, r3
 800067c:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 800067e:	4b4d      	ldr	r3, [pc, #308]	@ (80007b4 <readCoils+0x150>)
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	b21a      	sxth	r2, r3
 8000686:	4b4b      	ldr	r3, [pc, #300]	@ (80007b4 <readCoils+0x150>)
 8000688:	795b      	ldrb	r3, [r3, #5]
 800068a:	b21b      	sxth	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b21b      	sxth	r3, r3
 8000690:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 8000692:	893b      	ldrh	r3, [r7, #8]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d003      	beq.n	80006a0 <readCoils+0x3c>
 8000698:	893b      	ldrh	r3, [r7, #8]
 800069a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800069e:	d904      	bls.n	80006aa <readCoils+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80006a0:	2003      	movs	r0, #3
 80006a2:	f7ff fe91 	bl	80003c8 <modbusException>
		return 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e080      	b.n	80007ac <readCoils+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 80006aa:	897a      	ldrh	r2, [r7, #10]
 80006ac:	893b      	ldrh	r3, [r7, #8]
 80006ae:	4413      	add	r3, r2
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	3b01      	subs	r3, #1
 80006b4:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80006ba:	d904      	bls.n	80006c6 <readCoils+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80006bc:	2002      	movs	r0, #2
 80006be:	f7ff fe83 	bl	80003c8 <modbusException>
		return 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e072      	b.n	80007ac <readCoils+0x148>
	}


	//reset TxData buffer
	memset (TxData, '\0', 256);
 80006c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ca:	2100      	movs	r1, #0
 80006cc:	483a      	ldr	r0, [pc, #232]	@ (80007b8 <readCoils+0x154>)
 80006ce:	f002 fa45 	bl	8002b5c <memset>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 80006d2:	4b39      	ldr	r3, [pc, #228]	@ (80007b8 <readCoils+0x154>)
 80006d4:	2207      	movs	r2, #7
 80006d6:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 80006d8:	4b36      	ldr	r3, [pc, #216]	@ (80007b4 <readCoils+0x150>)
 80006da:	785a      	ldrb	r2, [r3, #1]
 80006dc:	4b36      	ldr	r3, [pc, #216]	@ (80007b8 <readCoils+0x154>)
 80006de:	705a      	strb	r2, [r3, #1]
	TxData[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 80006e0:	893b      	ldrh	r3, [r7, #8]
 80006e2:	08db      	lsrs	r3, r3, #3
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	893a      	ldrh	r2, [r7, #8]
 80006ea:	f002 0207 	and.w	r2, r2, #7
 80006ee:	b292      	uxth	r2, r2
 80006f0:	2a00      	cmp	r2, #0
 80006f2:	bf14      	ite	ne
 80006f4:	2201      	movne	r2, #1
 80006f6:	2200      	moveq	r2, #0
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	4413      	add	r3, r2
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b2e      	ldr	r3, [pc, #184]	@ (80007b8 <readCoils+0x154>)
 8000700:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8000702:	2303      	movs	r3, #3
 8000704:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 8000706:	897b      	ldrh	r3, [r7, #10]
 8000708:	08db      	lsrs	r3, r3, #3
 800070a:	b29b      	uxth	r3, r3
 800070c:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 800070e:	897b      	ldrh	r3, [r7, #10]
 8000710:	f003 0307 	and.w	r3, r3, #7
 8000714:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData buffer
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData buffer
	for (int i=0; i<numCoils; i++)
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	e033      	b.n	8000788 <readCoils+0x124>
	{
		TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 8000720:	4a25      	ldr	r2, [pc, #148]	@ (80007b8 <readCoils+0x154>)
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b25a      	sxtb	r2, r3
 800072a:	4924      	ldr	r1, [pc, #144]	@ (80007bc <readCoils+0x158>)
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	440b      	add	r3, r1
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	4619      	mov	r1, r3
 8000734:	8afb      	ldrh	r3, [r7, #22]
 8000736:	fa41 f303 	asr.w	r3, r1, r3
 800073a:	f003 0101 	and.w	r1, r3, #1
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	fa01 f303 	lsl.w	r3, r1, r3
 8000744:	b25b      	sxtb	r3, r3
 8000746:	4313      	orrs	r3, r2
 8000748:	b25b      	sxtb	r3, r3
 800074a:	b2d9      	uxtb	r1, r3
 800074c:	4a1a      	ldr	r2, [pc, #104]	@ (80007b8 <readCoils+0x154>)
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	4413      	add	r3, r2
 8000752:	460a      	mov	r2, r1
 8000754:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	3301      	adds	r3, #1
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	3301      	adds	r3, #1
 8000760:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	2b07      	cmp	r3, #7
 8000766:	dd04      	ble.n	8000772 <readCoils+0x10e>
		{
			indxPosition = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
			indx++;
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	3301      	adds	r3, #1
 8000770:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8000772:	8afb      	ldrh	r3, [r7, #22]
 8000774:	2b07      	cmp	r3, #7
 8000776:	d904      	bls.n	8000782 <readCoils+0x11e>
		{
			bitPosition=0;
 8000778:	2300      	movs	r3, #0
 800077a:	82fb      	strh	r3, [r7, #22]
			startByte++;
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	3301      	adds	r3, #1
 8000780:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3301      	adds	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	893b      	ldrh	r3, [r7, #8]
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	429a      	cmp	r2, r3
 800078e:	dbc7      	blt.n	8000720 <readCoils+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 8000790:	893b      	ldrh	r3, [r7, #8]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	b29b      	uxth	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <readCoils+0x13e>
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	3301      	adds	r3, #1
 80007a0:	61fb      	str	r3, [r7, #28]
	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 80007a2:	69f9      	ldr	r1, [r7, #28]
 80007a4:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <readCoils+0x154>)
 80007a6:	f7ff fde3 	bl	8000370 <sendData>
	return 1;   // success
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200000f0 	.word	0x200000f0
 80007b8:	200001f0 	.word	0x200001f0
 80007bc:	20000064 	.word	0x20000064

080007c0 <readInputs>:

uint8_t readInputs (void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 80007c6:	4b52      	ldr	r3, [pc, #328]	@ (8000910 <readInputs+0x150>)
 80007c8:	789b      	ldrb	r3, [r3, #2]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	b21a      	sxth	r2, r3
 80007ce:	4b50      	ldr	r3, [pc, #320]	@ (8000910 <readInputs+0x150>)
 80007d0:	78db      	ldrb	r3, [r3, #3]
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 80007da:	4b4d      	ldr	r3, [pc, #308]	@ (8000910 <readInputs+0x150>)
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	021b      	lsls	r3, r3, #8
 80007e0:	b21a      	sxth	r2, r3
 80007e2:	4b4b      	ldr	r3, [pc, #300]	@ (8000910 <readInputs+0x150>)
 80007e4:	795b      	ldrb	r3, [r3, #5]
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 80007ee:	893b      	ldrh	r3, [r7, #8]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d003      	beq.n	80007fc <readInputs+0x3c>
 80007f4:	893b      	ldrh	r3, [r7, #8]
 80007f6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80007fa:	d904      	bls.n	8000806 <readInputs+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80007fc:	2003      	movs	r0, #3
 80007fe:	f7ff fde3 	bl	80003c8 <modbusException>
		return 0;
 8000802:	2300      	movs	r3, #0
 8000804:	e080      	b.n	8000908 <readInputs+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 8000806:	897a      	ldrh	r2, [r7, #10]
 8000808:	893b      	ldrh	r3, [r7, #8]
 800080a:	4413      	add	r3, r2
 800080c:	b29b      	uxth	r3, r3
 800080e:	3b01      	subs	r3, #1
 8000810:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	2bc7      	cmp	r3, #199	@ 0xc7
 8000816:	d904      	bls.n	8000822 <readInputs+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000818:	2002      	movs	r0, #2
 800081a:	f7ff fdd5 	bl	80003c8 <modbusException>
		return 0;
 800081e:	2300      	movs	r3, #0
 8000820:	e072      	b.n	8000908 <readInputs+0x148>
	}


	//reset TxData buffer
	memset (TxData, '\0', 256);
 8000822:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000826:	2100      	movs	r1, #0
 8000828:	483a      	ldr	r0, [pc, #232]	@ (8000914 <readInputs+0x154>)
 800082a:	f002 f997 	bl	8002b5c <memset>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 800082e:	4b39      	ldr	r3, [pc, #228]	@ (8000914 <readInputs+0x154>)
 8000830:	2207      	movs	r2, #7
 8000832:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8000834:	4b36      	ldr	r3, [pc, #216]	@ (8000910 <readInputs+0x150>)
 8000836:	785a      	ldrb	r2, [r3, #1]
 8000838:	4b36      	ldr	r3, [pc, #216]	@ (8000914 <readInputs+0x154>)
 800083a:	705a      	strb	r2, [r3, #1]
	TxData[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 800083c:	893b      	ldrh	r3, [r7, #8]
 800083e:	08db      	lsrs	r3, r3, #3
 8000840:	b29b      	uxth	r3, r3
 8000842:	b2db      	uxtb	r3, r3
 8000844:	893a      	ldrh	r2, [r7, #8]
 8000846:	f002 0207 	and.w	r2, r2, #7
 800084a:	b292      	uxth	r2, r2
 800084c:	2a00      	cmp	r2, #0
 800084e:	bf14      	ite	ne
 8000850:	2201      	movne	r2, #1
 8000852:	2200      	moveq	r2, #0
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	4413      	add	r3, r2
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b2e      	ldr	r3, [pc, #184]	@ (8000914 <readInputs+0x154>)
 800085c:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 800085e:	2303      	movs	r3, #3
 8000860:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 8000862:	897b      	ldrh	r3, [r7, #10]
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	b29b      	uxth	r3, r3
 8000868:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 800086a:	897b      	ldrh	r3, [r7, #10]
 800086c:	f003 0307 	and.w	r3, r3, #7
 8000870:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData buffer
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData buffer
	for (int i=0; i<numCoils; i++)
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	e033      	b.n	80008e4 <readInputs+0x124>
	{
		TxData[indx] |= ((Inputs_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 800087c:	4a25      	ldr	r2, [pc, #148]	@ (8000914 <readInputs+0x154>)
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	4413      	add	r3, r2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b25a      	sxtb	r2, r3
 8000886:	4924      	ldr	r1, [pc, #144]	@ (8000918 <readInputs+0x158>)
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	440b      	add	r3, r1
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	8afb      	ldrh	r3, [r7, #22]
 8000892:	fa41 f303 	asr.w	r3, r1, r3
 8000896:	f003 0101 	and.w	r1, r3, #1
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	fa01 f303 	lsl.w	r3, r1, r3
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b25b      	sxtb	r3, r3
 80008a6:	b2d9      	uxtb	r1, r3
 80008a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000914 <readInputs+0x154>)
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	4413      	add	r3, r2
 80008ae:	460a      	mov	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	3301      	adds	r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	8afb      	ldrh	r3, [r7, #22]
 80008ba:	3301      	adds	r3, #1
 80008bc:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	2b07      	cmp	r3, #7
 80008c2:	dd04      	ble.n	80008ce <readInputs+0x10e>
		{
			indxPosition = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
			indx++;
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	3301      	adds	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 80008ce:	8afb      	ldrh	r3, [r7, #22]
 80008d0:	2b07      	cmp	r3, #7
 80008d2:	d904      	bls.n	80008de <readInputs+0x11e>
		{
			bitPosition=0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	82fb      	strh	r3, [r7, #22]
			startByte++;
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	3301      	adds	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3301      	adds	r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	893b      	ldrh	r3, [r7, #8]
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dbc7      	blt.n	800087c <readInputs+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 80008ec:	893b      	ldrh	r3, [r7, #8]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d002      	beq.n	80008fe <readInputs+0x13e>
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	3301      	adds	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 80008fe:	69f9      	ldr	r1, [r7, #28]
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <readInputs+0x154>)
 8000902:	f7ff fd35 	bl	8000370 <sendData>
	return 1;   // success
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000f0 	.word	0x200000f0
 8000914:	200001f0 	.word	0x200001f0
 8000918:	08002c30 	.word	0x08002c30

0800091c <writeMultipleHoldingRegs>:

uint8_t writeMultipleHoldingRegs (void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000922:	4b39      	ldr	r3, [pc, #228]	@ (8000a08 <writeMultipleHoldingRegs+0xec>)
 8000924:	789b      	ldrb	r3, [r3, #2]
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	b21a      	sxth	r2, r3
 800092a:	4b37      	ldr	r3, [pc, #220]	@ (8000a08 <writeMultipleHoldingRegs+0xec>)
 800092c:	78db      	ldrb	r3, [r3, #3]
 800092e:	b21b      	sxth	r3, r3
 8000930:	4313      	orrs	r3, r2
 8000932:	b21b      	sxth	r3, r3
 8000934:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8000936:	4b34      	ldr	r3, [pc, #208]	@ (8000a08 <writeMultipleHoldingRegs+0xec>)
 8000938:	791b      	ldrb	r3, [r3, #4]
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	b21a      	sxth	r2, r3
 800093e:	4b32      	ldr	r3, [pc, #200]	@ (8000a08 <writeMultipleHoldingRegs+0xec>)
 8000940:	795b      	ldrb	r3, [r3, #5]
 8000942:	b21b      	sxth	r3, r3
 8000944:	4313      	orrs	r3, r2
 8000946:	b21b      	sxth	r3, r3
 8000948:	80fb      	strh	r3, [r7, #6]
	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per the PDF
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <writeMultipleHoldingRegs+0x3a>
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	2b7b      	cmp	r3, #123	@ 0x7b
 8000954:	d904      	bls.n	8000960 <writeMultipleHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000956:	2003      	movs	r0, #3
 8000958:	f7ff fd36 	bl	80003c8 <modbusException>
		return 0;
 800095c:	2300      	movs	r3, #0
 800095e:	e04e      	b.n	80009fe <writeMultipleHoldingRegs+0xe2>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8000960:	89fa      	ldrh	r2, [r7, #14]
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	4413      	add	r3, r2
 8000966:	b29b      	uxth	r3, r3
 8000968:	3b01      	subs	r3, #1
 800096a:	80bb      	strh	r3, [r7, #4]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 800096c:	88bb      	ldrh	r3, [r7, #4]
 800096e:	2b31      	cmp	r3, #49	@ 0x31
 8000970:	d904      	bls.n	800097c <writeMultipleHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff fd28 	bl	80003c8 <modbusException>
		return 0;
 8000978:	2300      	movs	r3, #0
 800097a:	e040      	b.n	80009fe <writeMultipleHoldingRegs+0xe2>

	/* start saving 16 bit data
	 * Data starts from RxData[7] and we need to combine 2 bytes together
	 * 16 bit Data = firstByte<<8|secondByte
	 */
	uint8_t indx = 7;  // we need to keep track of index in RxData
 800097c:	2307      	movs	r3, #7
 800097e:	737b      	strb	r3, [r7, #13]
	for (int i=0; i<numRegs; i++)
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	e01b      	b.n	80009be <writeMultipleHoldingRegs+0xa2>
	{
		Holding_Registers_Database[startAddr++] = (RxData[indx++]<<8)|RxData[indx++];
 8000986:	7b7b      	ldrb	r3, [r7, #13]
 8000988:	1c5a      	adds	r2, r3, #1
 800098a:	737a      	strb	r2, [r7, #13]
 800098c:	461a      	mov	r2, r3
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <writeMultipleHoldingRegs+0xec>)
 8000990:	5c9b      	ldrb	r3, [r3, r2]
 8000992:	021b      	lsls	r3, r3, #8
 8000994:	b21a      	sxth	r2, r3
 8000996:	7b7b      	ldrb	r3, [r7, #13]
 8000998:	1c59      	adds	r1, r3, #1
 800099a:	7379      	strb	r1, [r7, #13]
 800099c:	4619      	mov	r1, r3
 800099e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <writeMultipleHoldingRegs+0xec>)
 80009a0:	5c5b      	ldrb	r3, [r3, r1]
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b219      	sxth	r1, r3
 80009a8:	89fb      	ldrh	r3, [r7, #14]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	81fa      	strh	r2, [r7, #14]
 80009ae:	461a      	mov	r2, r3
 80009b0:	b289      	uxth	r1, r1
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <writeMultipleHoldingRegs+0xf0>)
 80009b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0; i<numRegs; i++)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	dbdf      	blt.n	8000986 <writeMultipleHoldingRegs+0x6a>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | num of Regs    | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES      | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 80009c6:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <writeMultipleHoldingRegs+0xf4>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 80009cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <writeMultipleHoldingRegs+0xec>)
 80009ce:	785a      	ldrb	r2, [r3, #1]
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <writeMultipleHoldingRegs+0xf4>)
 80009d2:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <writeMultipleHoldingRegs+0xec>)
 80009d6:	789a      	ldrb	r2, [r3, #2]
 80009d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <writeMultipleHoldingRegs+0xf4>)
 80009da:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <writeMultipleHoldingRegs+0xec>)
 80009de:	78da      	ldrb	r2, [r3, #3]
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <writeMultipleHoldingRegs+0xf4>)
 80009e2:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // num of Regs HIGH Byte
 80009e4:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <writeMultipleHoldingRegs+0xec>)
 80009e6:	791a      	ldrb	r2, [r3, #4]
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <writeMultipleHoldingRegs+0xf4>)
 80009ea:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // num of Regs LOW Byte
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <writeMultipleHoldingRegs+0xec>)
 80009ee:	795a      	ldrb	r2, [r3, #5]
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <writeMultipleHoldingRegs+0xf4>)
 80009f2:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 80009f4:	2106      	movs	r1, #6
 80009f6:	4806      	ldr	r0, [pc, #24]	@ (8000a10 <writeMultipleHoldingRegs+0xf4>)
 80009f8:	f7ff fcba 	bl	8000370 <sendData>
	return 1;   // success
 80009fc:	2301      	movs	r3, #1
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000f0 	.word	0x200000f0
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	200001f0 	.word	0x200001f0

08000a14 <writeSingleCoil>:

uint8_t writeSingleCoil (void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 8000a1a:	4b38      	ldr	r3, [pc, #224]	@ (8000afc <writeSingleCoil+0xe8>)
 8000a1c:	789b      	ldrb	r3, [r3, #2]
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	b21a      	sxth	r2, r3
 8000a22:	4b36      	ldr	r3, [pc, #216]	@ (8000afc <writeSingleCoil+0xe8>)
 8000a24:	78db      	ldrb	r3, [r3, #3]
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	81fb      	strh	r3, [r7, #14]

	if (startAddr>199)  // The Coil Address can not be more than 199 as we only have record of 200 Coils in total
 8000a2e:	89fb      	ldrh	r3, [r7, #14]
 8000a30:	2bc7      	cmp	r3, #199	@ 0xc7
 8000a32:	d904      	bls.n	8000a3e <writeSingleCoil+0x2a>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000a34:	2002      	movs	r0, #2
 8000a36:	f7ff fcc7 	bl	80003c8 <modbusException>
		return 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e05a      	b.n	8000af4 <writeSingleCoil+0xe0>
	}

	/* Calculation for the bit in the database, where the modification will be done */
	int startByte = startAddr/8;  // which byte we have to start writing the data into
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	08db      	lsrs	r3, r3, #3
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	60bb      	str	r3, [r7, #8]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8000a46:	89fb      	ldrh	r3, [r7, #14]
 8000a48:	f003 0307 	and.w	r3, r3, #7
 8000a4c:	80fb      	strh	r3, [r7, #6]
	 * A value of FF 00 hex requests the coil to be ON.
	 * A value of 00 00 requests it to be OFF.
	 * All other values are illegal and will not affect the coil.
	 */

	if ((RxData[4] == 0xFF) && (RxData[5] == 0x00))
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <writeSingleCoil+0xe8>)
 8000a50:	791b      	ldrb	r3, [r3, #4]
 8000a52:	2bff      	cmp	r3, #255	@ 0xff
 8000a54:	d116      	bne.n	8000a84 <writeSingleCoil+0x70>
 8000a56:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <writeSingleCoil+0xe8>)
 8000a58:	795b      	ldrb	r3, [r3, #5]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d112      	bne.n	8000a84 <writeSingleCoil+0x70>
	{
		Coils_Database[startByte] |= 1<<bitPosition; // Replace that bit with 1
 8000a5e:	4a28      	ldr	r2, [pc, #160]	@ (8000b00 <writeSingleCoil+0xec>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b25a      	sxtb	r2, r3
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	4313      	orrs	r3, r2
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	b2d9      	uxtb	r1, r3
 8000a78:	4a21      	ldr	r2, [pc, #132]	@ (8000b00 <writeSingleCoil+0xec>)
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	460a      	mov	r2, r1
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e01b      	b.n	8000abc <writeSingleCoil+0xa8>
	}

	else if ((RxData[4] == 0x00) && (RxData[5] == 0x00))
 8000a84:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <writeSingleCoil+0xe8>)
 8000a86:	791b      	ldrb	r3, [r3, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d117      	bne.n	8000abc <writeSingleCoil+0xa8>
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <writeSingleCoil+0xe8>)
 8000a8e:	795b      	ldrb	r3, [r3, #5]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d113      	bne.n	8000abc <writeSingleCoil+0xa8>
	{
		Coils_Database[startByte] &= ~(1<<bitPosition); // Replace that bit with 0
 8000a94:	4a1a      	ldr	r2, [pc, #104]	@ (8000b00 <writeSingleCoil+0xec>)
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b25a      	sxtb	r2, r3
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	b25b      	sxtb	r3, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	b25b      	sxtb	r3, r3
 8000aac:	4013      	ands	r3, r2
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	b2d9      	uxtb	r1, r3
 8000ab2:	4a13      	ldr	r2, [pc, #76]	@ (8000b00 <writeSingleCoil+0xec>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	460a      	mov	r2, r1
 8000aba:	701a      	strb	r2, [r3, #0]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <writeSingleCoil+0xf0>)
 8000abe:	2207      	movs	r2, #7
 8000ac0:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <writeSingleCoil+0xe8>)
 8000ac4:	785a      	ldrb	r2, [r3, #1]
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <writeSingleCoil+0xf0>)
 8000ac8:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <writeSingleCoil+0xe8>)
 8000acc:	789a      	ldrb	r2, [r3, #2]
 8000ace:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <writeSingleCoil+0xf0>)
 8000ad0:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <writeSingleCoil+0xe8>)
 8000ad4:	78da      	ldrb	r2, [r3, #3]
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <writeSingleCoil+0xf0>)
 8000ad8:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // Coil Data HIGH Byte
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <writeSingleCoil+0xe8>)
 8000adc:	791a      	ldrb	r2, [r3, #4]
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <writeSingleCoil+0xf0>)
 8000ae0:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // Coil Data LOW  Byte
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <writeSingleCoil+0xe8>)
 8000ae4:	795a      	ldrb	r2, [r3, #5]
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <writeSingleCoil+0xf0>)
 8000ae8:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8000aea:	2106      	movs	r1, #6
 8000aec:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <writeSingleCoil+0xf0>)
 8000aee:	f7ff fc3f 	bl	8000370 <sendData>
	return 1;   // success
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200000f0 	.word	0x200000f0
 8000b00:	20000064 	.word	0x20000064
 8000b04:	200001f0 	.word	0x200001f0

08000b08 <writeMultiCoils>:

uint8_t writeMultiCoils (void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 8000b0e:	4b56      	ldr	r3, [pc, #344]	@ (8000c68 <writeMultiCoils+0x160>)
 8000b10:	789b      	ldrb	r3, [r3, #2]
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	4b54      	ldr	r3, [pc, #336]	@ (8000c68 <writeMultiCoils+0x160>)
 8000b18:	78db      	ldrb	r3, [r3, #3]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 8000b22:	4b51      	ldr	r3, [pc, #324]	@ (8000c68 <writeMultiCoils+0x160>)
 8000b24:	791b      	ldrb	r3, [r3, #4]
 8000b26:	021b      	lsls	r3, r3, #8
 8000b28:	b21a      	sxth	r2, r3
 8000b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8000c68 <writeMultiCoils+0x160>)
 8000b2c:	795b      	ldrb	r3, [r3, #5]
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>1968))  // maximum no. of coils as per the PDF
 8000b36:	893b      	ldrh	r3, [r7, #8]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <writeMultiCoils+0x3c>
 8000b3c:	893b      	ldrh	r3, [r7, #8]
 8000b3e:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 8000b42:	d904      	bls.n	8000b4e <writeMultiCoils+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000b44:	2003      	movs	r0, #3
 8000b46:	f7ff fc3f 	bl	80003c8 <modbusException>
		return 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e088      	b.n	8000c60 <writeMultiCoils+0x158>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 8000b4e:	897a      	ldrh	r2, [r7, #10]
 8000b50:	893b      	ldrh	r3, [r7, #8]
 8000b52:	4413      	add	r3, r2
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	3b01      	subs	r3, #1
 8000b58:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8000b5e:	d904      	bls.n	8000b6a <writeMultiCoils+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000b60:	2002      	movs	r0, #2
 8000b62:	f7ff fc31 	bl	80003c8 <modbusException>
		return 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e07a      	b.n	8000c60 <writeMultiCoils+0x158>
	}

	/* Calculation for the bit in the database, where the modification will be done */
	int startByte = startAddr/8;  // which byte we have to start writing the data into
 8000b6a:	897b      	ldrh	r3, [r7, #10]
 8000b6c:	08db      	lsrs	r3, r3, #3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	61fb      	str	r3, [r7, #28]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 8000b72:	897b      	ldrh	r3, [r7, #10]
 8000b74:	f003 0307 	and.w	r3, r3, #7
 8000b78:	837b      	strh	r3, [r7, #26]
	int indxPosition = 0;  // The shift position in the current indx of the RxData buffer
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]

	int indx = 7;  // we need to keep track of index in RxData
 8000b7e:	2307      	movs	r3, #7
 8000b80:	613b      	str	r3, [r7, #16]
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy from the next byte of the RxData
	 * This keeps going until the number of coils required have been modified
	 */

	// Modify the bits as per the Byte received
	for (int i=0; i<numCoils; i++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	e04b      	b.n	8000c20 <writeMultiCoils+0x118>
	{
		if (((RxData[indx]>>indxPosition)&0x01) == 1)
 8000b88:	4a37      	ldr	r2, [pc, #220]	@ (8000c68 <writeMultiCoils+0x160>)
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	fa42 f303 	asr.w	r3, r2, r3
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d012      	beq.n	8000bc6 <writeMultiCoils+0xbe>
		{
			Coils_Database[startByte] |= 1<<bitPosition;  // replace that bit with 1
 8000ba0:	4a32      	ldr	r2, [pc, #200]	@ (8000c6c <writeMultiCoils+0x164>)
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b25a      	sxtb	r2, r3
 8000baa:	8b7b      	ldrh	r3, [r7, #26]
 8000bac:	2101      	movs	r1, #1
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	b25b      	sxtb	r3, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	b2d9      	uxtb	r1, r3
 8000bba:	4a2c      	ldr	r2, [pc, #176]	@ (8000c6c <writeMultiCoils+0x164>)
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e013      	b.n	8000bee <writeMultiCoils+0xe6>
		}
		else
		{
			Coils_Database[startByte] &= ~(1<<bitPosition);  // replace that bit with 0
 8000bc6:	4a29      	ldr	r2, [pc, #164]	@ (8000c6c <writeMultiCoils+0x164>)
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25a      	sxtb	r2, r3
 8000bd0:	8b7b      	ldrh	r3, [r7, #26]
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	4013      	ands	r3, r2
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	b2d9      	uxtb	r1, r3
 8000be4:	4a21      	ldr	r2, [pc, #132]	@ (8000c6c <writeMultiCoils+0x164>)
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	4413      	add	r3, r2
 8000bea:	460a      	mov	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
		}

		bitPosition++; indxPosition++;
 8000bee:	8b7b      	ldrh	r3, [r7, #26]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	837b      	strh	r3, [r7, #26]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]

		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	2b07      	cmp	r3, #7
 8000bfe:	dd04      	ble.n	8000c0a <writeMultiCoils+0x102>
		{
			indxPosition = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
			indx++;
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	3301      	adds	r3, #1
 8000c08:	613b      	str	r3, [r7, #16]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8000c0a:	8b7b      	ldrh	r3, [r7, #26]
 8000c0c:	2b07      	cmp	r3, #7
 8000c0e:	d904      	bls.n	8000c1a <writeMultiCoils+0x112>
		{
			bitPosition=0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	837b      	strh	r3, [r7, #26]
			startByte++;
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	3301      	adds	r3, #1
 8000c18:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<numCoils; i++)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	893b      	ldrh	r3, [r7, #8]
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbaf      	blt.n	8000b88 <writeMultiCoils+0x80>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <writeMultiCoils+0x168>)
 8000c2a:	2207      	movs	r2, #7
 8000c2c:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <writeMultiCoils+0x160>)
 8000c30:	785a      	ldrb	r2, [r3, #1]
 8000c32:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <writeMultiCoils+0x168>)
 8000c34:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <writeMultiCoils+0x160>)
 8000c38:	789a      	ldrb	r2, [r3, #2]
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <writeMultiCoils+0x168>)
 8000c3c:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <writeMultiCoils+0x160>)
 8000c40:	78da      	ldrb	r2, [r3, #3]
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <writeMultiCoils+0x168>)
 8000c44:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // num of coils HIGH Byte
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <writeMultiCoils+0x160>)
 8000c48:	791a      	ldrb	r2, [r3, #4]
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <writeMultiCoils+0x168>)
 8000c4c:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // num of coils LOW  Byte
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <writeMultiCoils+0x160>)
 8000c50:	795a      	ldrb	r2, [r3, #5]
 8000c52:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <writeMultiCoils+0x168>)
 8000c54:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8000c56:	2106      	movs	r1, #6
 8000c58:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <writeMultiCoils+0x168>)
 8000c5a:	f7ff fb89 	bl	8000370 <sendData>
	return 1;   // success
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3720      	adds	r7, #32
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200000f0 	.word	0x200000f0
 8000c6c:	20000064 	.word	0x20000064
 8000c70:	200001f0 	.word	0x200001f0

08000c74 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000c80:	23ff      	movs	r3, #255	@ 0xff
 8000c82:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000c84:	23ff      	movs	r3, #255	@ 0xff
 8000c86:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000c88:	e013      	b.n	8000cb2 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	4053      	eors	r3, r2
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd8 <crc16+0x64>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781a      	ldrb	r2, [r3, #0]
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	4053      	eors	r3, r2
 8000ca6:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cdc <crc16+0x68>)
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	4413      	add	r3, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8000cb2:	887b      	ldrh	r3, [r7, #2]
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	807a      	strh	r2, [r7, #2]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1e6      	bne.n	8000c8a <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	b29b      	uxth	r3, r3
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	08002c4c 	.word	0x08002c4c
 8000cdc:	08002d4c 	.word	0x08002d4c

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <HAL_MspInit+0x5c>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <HAL_MspInit+0x5c>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <HAL_MspInit+0x5c>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <HAL_MspInit+0x5c>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a0e      	ldr	r2, [pc, #56]	@ (8000d3c <HAL_MspInit+0x5c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <HAL_MspInit+0x5c>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <HAL_MspInit+0x60>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <HAL_MspInit+0x60>)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a20      	ldr	r2, [pc, #128]	@ (8000de0 <HAL_UART_MspInit+0x9c>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d139      	bne.n	8000dd8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d64:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <HAL_UART_MspInit+0xa0>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a1e      	ldr	r2, [pc, #120]	@ (8000de4 <HAL_UART_MspInit+0xa0>)
 8000d6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <HAL_UART_MspInit+0xa0>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <HAL_UART_MspInit+0xa0>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a18      	ldr	r2, [pc, #96]	@ (8000de4 <HAL_UART_MspInit+0xa0>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <HAL_UART_MspInit+0xa0>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	480f      	ldr	r0, [pc, #60]	@ (8000de8 <HAL_UART_MspInit+0xa4>)
 8000daa:	f000 faa3 	bl	80012f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000db2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4809      	ldr	r0, [pc, #36]	@ (8000de8 <HAL_UART_MspInit+0xa4>)
 8000dc4:	f000 fa96 	bl	80012f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2025      	movs	r0, #37	@ 0x25
 8000dce:	f000 f9a8 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dd2:	2025      	movs	r0, #37	@ 0x25
 8000dd4:	f000 f9c1 	bl	800115a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40013800 	.word	0x40013800
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010800 	.word	0x40010800

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <NMI_Handler+0x4>

08000df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <MemManage_Handler+0x4>

08000e04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f87e 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <USART1_IRQHandler+0x10>)
 8000e4a:	f001 f91f 	bl	800208c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200000a8 	.word	0x200000a8

08000e58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e64:	f7ff fff8 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e68:	480b      	ldr	r0, [pc, #44]	@ (8000e98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e6a:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ea4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e80:	4c09      	ldr	r4, [pc, #36]	@ (8000ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f001 fe6d 	bl	8002b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e92:	f7ff f9bf 	bl	8000214 <main>
  bx lr
 8000e96:	4770      	bx	lr
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000ea0:	08002e80 	.word	0x08002e80
  ldr r2, =_sbss
 8000ea4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000ea8:	200002f4 	.word	0x200002f4

08000eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_2_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <HAL_Init+0x28>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	@ (8000ed8 <HAL_Init+0x28>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f923 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff ff08 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40022000 	.word	0x40022000

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f93b 	bl	8001176 <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f903 	bl	8001122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	@ (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000080 	.word	0x20000080
 8000f34:	20000088 	.word	0x20000088
 8000f38:	20000084 	.word	0x20000084

08000f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <HAL_IncTick+0x1c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <HAL_IncTick+0x20>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a03      	ldr	r2, [pc, #12]	@ (8000f5c <HAL_IncTick+0x20>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	20000088 	.word	0x20000088
 8000f5c:	200002f0 	.word	0x200002f0

08000f60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b02      	ldr	r3, [pc, #8]	@ (8000f70 <HAL_GetTick+0x10>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	200002f0 	.word	0x200002f0

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4906      	ldr	r1, [pc, #24]	@ (800100c <__NVIC_EnableIRQ+0x34>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	@ (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	@ (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	@ 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d8:	d301      	bcc.n	80010de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2301      	movs	r3, #1
 80010dc:	e00f      	b.n	80010fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010de:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <SysTick_Config+0x40>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e6:	210f      	movs	r1, #15
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f7ff ff90 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <SysTick_Config+0x40>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <SysTick_Config+0x40>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff2d 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff42 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff90 	bl	8001064 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5f 	bl	8001010 <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff35 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa2 	bl	80010c8 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800118e:	b480      	push	{r7}
 8001190:	b085      	sub	sp, #20
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d008      	beq.n	80011b8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2204      	movs	r2, #4
 80011aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e020      	b.n	80011fa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 020e 	bic.w	r2, r2, #14
 80011c6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0201 	bic.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011e0:	2101      	movs	r1, #1
 80011e2:	fa01 f202 	lsl.w	r2, r1, r2
 80011e6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d005      	beq.n	8001228 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2204      	movs	r2, #4
 8001220:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e051      	b.n	80012cc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 020e 	bic.w	r2, r2, #14
 8001236:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a22      	ldr	r2, [pc, #136]	@ (80012d8 <HAL_DMA_Abort_IT+0xd4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d029      	beq.n	80012a6 <HAL_DMA_Abort_IT+0xa2>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a21      	ldr	r2, [pc, #132]	@ (80012dc <HAL_DMA_Abort_IT+0xd8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d022      	beq.n	80012a2 <HAL_DMA_Abort_IT+0x9e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a1f      	ldr	r2, [pc, #124]	@ (80012e0 <HAL_DMA_Abort_IT+0xdc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01a      	beq.n	800129c <HAL_DMA_Abort_IT+0x98>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a1e      	ldr	r2, [pc, #120]	@ (80012e4 <HAL_DMA_Abort_IT+0xe0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d012      	beq.n	8001296 <HAL_DMA_Abort_IT+0x92>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <HAL_DMA_Abort_IT+0xe4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00a      	beq.n	8001290 <HAL_DMA_Abort_IT+0x8c>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a1b      	ldr	r2, [pc, #108]	@ (80012ec <HAL_DMA_Abort_IT+0xe8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d102      	bne.n	800128a <HAL_DMA_Abort_IT+0x86>
 8001284:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001288:	e00e      	b.n	80012a8 <HAL_DMA_Abort_IT+0xa4>
 800128a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800128e:	e00b      	b.n	80012a8 <HAL_DMA_Abort_IT+0xa4>
 8001290:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001294:	e008      	b.n	80012a8 <HAL_DMA_Abort_IT+0xa4>
 8001296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129a:	e005      	b.n	80012a8 <HAL_DMA_Abort_IT+0xa4>
 800129c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012a0:	e002      	b.n	80012a8 <HAL_DMA_Abort_IT+0xa4>
 80012a2:	2310      	movs	r3, #16
 80012a4:	e000      	b.n	80012a8 <HAL_DMA_Abort_IT+0xa4>
 80012a6:	2301      	movs	r3, #1
 80012a8:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <HAL_DMA_Abort_IT+0xec>)
 80012aa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
    } 
  }
  return status;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40020008 	.word	0x40020008
 80012dc:	4002001c 	.word	0x4002001c
 80012e0:	40020030 	.word	0x40020030
 80012e4:	40020044 	.word	0x40020044
 80012e8:	40020058 	.word	0x40020058
 80012ec:	4002006c 	.word	0x4002006c
 80012f0:	40020000 	.word	0x40020000

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b08b      	sub	sp, #44	@ 0x2c
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	e169      	b.n	80015dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001308:	2201      	movs	r2, #1
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	429a      	cmp	r2, r3
 8001322:	f040 8158 	bne.w	80015d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4a9a      	ldr	r2, [pc, #616]	@ (8001594 <HAL_GPIO_Init+0x2a0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d05e      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 8001330:	4a98      	ldr	r2, [pc, #608]	@ (8001594 <HAL_GPIO_Init+0x2a0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d875      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 8001336:	4a98      	ldr	r2, [pc, #608]	@ (8001598 <HAL_GPIO_Init+0x2a4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d058      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 800133c:	4a96      	ldr	r2, [pc, #600]	@ (8001598 <HAL_GPIO_Init+0x2a4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d86f      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 8001342:	4a96      	ldr	r2, [pc, #600]	@ (800159c <HAL_GPIO_Init+0x2a8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d052      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 8001348:	4a94      	ldr	r2, [pc, #592]	@ (800159c <HAL_GPIO_Init+0x2a8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d869      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 800134e:	4a94      	ldr	r2, [pc, #592]	@ (80015a0 <HAL_GPIO_Init+0x2ac>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d04c      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 8001354:	4a92      	ldr	r2, [pc, #584]	@ (80015a0 <HAL_GPIO_Init+0x2ac>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d863      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 800135a:	4a92      	ldr	r2, [pc, #584]	@ (80015a4 <HAL_GPIO_Init+0x2b0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d046      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 8001360:	4a90      	ldr	r2, [pc, #576]	@ (80015a4 <HAL_GPIO_Init+0x2b0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d85d      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 8001366:	2b12      	cmp	r3, #18
 8001368:	d82a      	bhi.n	80013c0 <HAL_GPIO_Init+0xcc>
 800136a:	2b12      	cmp	r3, #18
 800136c:	d859      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 800136e:	a201      	add	r2, pc, #4	@ (adr r2, 8001374 <HAL_GPIO_Init+0x80>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	080013ef 	.word	0x080013ef
 8001378:	080013c9 	.word	0x080013c9
 800137c:	080013db 	.word	0x080013db
 8001380:	0800141d 	.word	0x0800141d
 8001384:	08001423 	.word	0x08001423
 8001388:	08001423 	.word	0x08001423
 800138c:	08001423 	.word	0x08001423
 8001390:	08001423 	.word	0x08001423
 8001394:	08001423 	.word	0x08001423
 8001398:	08001423 	.word	0x08001423
 800139c:	08001423 	.word	0x08001423
 80013a0:	08001423 	.word	0x08001423
 80013a4:	08001423 	.word	0x08001423
 80013a8:	08001423 	.word	0x08001423
 80013ac:	08001423 	.word	0x08001423
 80013b0:	08001423 	.word	0x08001423
 80013b4:	08001423 	.word	0x08001423
 80013b8:	080013d1 	.word	0x080013d1
 80013bc:	080013e5 	.word	0x080013e5
 80013c0:	4a79      	ldr	r2, [pc, #484]	@ (80015a8 <HAL_GPIO_Init+0x2b4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013c6:	e02c      	b.n	8001422 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	623b      	str	r3, [r7, #32]
          break;
 80013ce:	e029      	b.n	8001424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	3304      	adds	r3, #4
 80013d6:	623b      	str	r3, [r7, #32]
          break;
 80013d8:	e024      	b.n	8001424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	3308      	adds	r3, #8
 80013e0:	623b      	str	r3, [r7, #32]
          break;
 80013e2:	e01f      	b.n	8001424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	330c      	adds	r3, #12
 80013ea:	623b      	str	r3, [r7, #32]
          break;
 80013ec:	e01a      	b.n	8001424 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013f6:	2304      	movs	r3, #4
 80013f8:	623b      	str	r3, [r7, #32]
          break;
 80013fa:	e013      	b.n	8001424 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d105      	bne.n	8001410 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001404:	2308      	movs	r3, #8
 8001406:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	611a      	str	r2, [r3, #16]
          break;
 800140e:	e009      	b.n	8001424 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001410:	2308      	movs	r3, #8
 8001412:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	615a      	str	r2, [r3, #20]
          break;
 800141a:	e003      	b.n	8001424 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
          break;
 8001420:	e000      	b.n	8001424 <HAL_GPIO_Init+0x130>
          break;
 8001422:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d801      	bhi.n	800142e <HAL_GPIO_Init+0x13a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	e001      	b.n	8001432 <HAL_GPIO_Init+0x13e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3304      	adds	r3, #4
 8001432:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2bff      	cmp	r3, #255	@ 0xff
 8001438:	d802      	bhi.n	8001440 <HAL_GPIO_Init+0x14c>
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	e002      	b.n	8001446 <HAL_GPIO_Init+0x152>
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	3b08      	subs	r3, #8
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	210f      	movs	r1, #15
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	fa01 f303 	lsl.w	r3, r1, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	401a      	ands	r2, r3
 8001458:	6a39      	ldr	r1, [r7, #32]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	431a      	orrs	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80b1 	beq.w	80015d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001474:	4b4d      	ldr	r3, [pc, #308]	@ (80015ac <HAL_GPIO_Init+0x2b8>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a4c      	ldr	r2, [pc, #304]	@ (80015ac <HAL_GPIO_Init+0x2b8>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b4a      	ldr	r3, [pc, #296]	@ (80015ac <HAL_GPIO_Init+0x2b8>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800148c:	4a48      	ldr	r2, [pc, #288]	@ (80015b0 <HAL_GPIO_Init+0x2bc>)
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001498:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4013      	ands	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a40      	ldr	r2, [pc, #256]	@ (80015b4 <HAL_GPIO_Init+0x2c0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d013      	beq.n	80014e0 <HAL_GPIO_Init+0x1ec>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a3f      	ldr	r2, [pc, #252]	@ (80015b8 <HAL_GPIO_Init+0x2c4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d00d      	beq.n	80014dc <HAL_GPIO_Init+0x1e8>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a3e      	ldr	r2, [pc, #248]	@ (80015bc <HAL_GPIO_Init+0x2c8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d007      	beq.n	80014d8 <HAL_GPIO_Init+0x1e4>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a3d      	ldr	r2, [pc, #244]	@ (80015c0 <HAL_GPIO_Init+0x2cc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d101      	bne.n	80014d4 <HAL_GPIO_Init+0x1e0>
 80014d0:	2303      	movs	r3, #3
 80014d2:	e006      	b.n	80014e2 <HAL_GPIO_Init+0x1ee>
 80014d4:	2304      	movs	r3, #4
 80014d6:	e004      	b.n	80014e2 <HAL_GPIO_Init+0x1ee>
 80014d8:	2302      	movs	r3, #2
 80014da:	e002      	b.n	80014e2 <HAL_GPIO_Init+0x1ee>
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <HAL_GPIO_Init+0x1ee>
 80014e0:	2300      	movs	r3, #0
 80014e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e4:	f002 0203 	and.w	r2, r2, #3
 80014e8:	0092      	lsls	r2, r2, #2
 80014ea:	4093      	lsls	r3, r2
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014f2:	492f      	ldr	r1, [pc, #188]	@ (80015b0 <HAL_GPIO_Init+0x2bc>)
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800150c:	4b2d      	ldr	r3, [pc, #180]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	492c      	ldr	r1, [pc, #176]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	608b      	str	r3, [r1, #8]
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800151a:	4b2a      	ldr	r3, [pc, #168]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	43db      	mvns	r3, r3
 8001522:	4928      	ldr	r1, [pc, #160]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001524:	4013      	ands	r3, r2
 8001526:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001534:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	4922      	ldr	r1, [pc, #136]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	60cb      	str	r3, [r1, #12]
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001542:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	43db      	mvns	r3, r3
 800154a:	491e      	ldr	r1, [pc, #120]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800154c:	4013      	ands	r3, r2
 800154e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800155c:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4918      	ldr	r1, [pc, #96]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800156a:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	43db      	mvns	r3, r3
 8001572:	4914      	ldr	r1, [pc, #80]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001574:	4013      	ands	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d021      	beq.n	80015c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	490e      	ldr	r1, [pc, #56]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
 8001590:	e021      	b.n	80015d6 <HAL_GPIO_Init+0x2e2>
 8001592:	bf00      	nop
 8001594:	10320000 	.word	0x10320000
 8001598:	10310000 	.word	0x10310000
 800159c:	10220000 	.word	0x10220000
 80015a0:	10210000 	.word	0x10210000
 80015a4:	10120000 	.word	0x10120000
 80015a8:	10110000 	.word	0x10110000
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010000 	.word	0x40010000
 80015b4:	40010800 	.word	0x40010800
 80015b8:	40010c00 	.word	0x40010c00
 80015bc:	40011000 	.word	0x40011000
 80015c0:	40011400 	.word	0x40011400
 80015c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015c8:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <HAL_GPIO_Init+0x304>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	4909      	ldr	r1, [pc, #36]	@ (80015f8 <HAL_GPIO_Init+0x304>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	3301      	adds	r3, #1
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e2:	fa22 f303 	lsr.w	r3, r2, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f47f ae8e 	bne.w	8001308 <HAL_GPIO_Init+0x14>
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	372c      	adds	r7, #44	@ 0x2c
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	40010400 	.word	0x40010400

080015fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e272      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8087 	beq.w	800172a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800161c:	4b92      	ldr	r3, [pc, #584]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b04      	cmp	r3, #4
 8001626:	d00c      	beq.n	8001642 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001628:	4b8f      	ldr	r3, [pc, #572]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	2b08      	cmp	r3, #8
 8001632:	d112      	bne.n	800165a <HAL_RCC_OscConfig+0x5e>
 8001634:	4b8c      	ldr	r3, [pc, #560]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001640:	d10b      	bne.n	800165a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001642:	4b89      	ldr	r3, [pc, #548]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d06c      	beq.n	8001728 <HAL_RCC_OscConfig+0x12c>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d168      	bne.n	8001728 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e24c      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x76>
 8001664:	4b80      	ldr	r3, [pc, #512]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a7f      	ldr	r2, [pc, #508]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 800166a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e02e      	b.n	80016d0 <HAL_RCC_OscConfig+0xd4>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x98>
 800167a:	4b7b      	ldr	r3, [pc, #492]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a7a      	ldr	r2, [pc, #488]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b78      	ldr	r3, [pc, #480]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a77      	ldr	r2, [pc, #476]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 800168c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e01d      	b.n	80016d0 <HAL_RCC_OscConfig+0xd4>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0xbc>
 800169e:	4b72      	ldr	r3, [pc, #456]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a71      	ldr	r2, [pc, #452]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0xd4>
 80016b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b68      	ldr	r3, [pc, #416]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a67      	ldr	r2, [pc, #412]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fc42 	bl	8000f60 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fc3e 	bl	8000f60 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	@ 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e200      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0xe4>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fc2e 	bl	8000f60 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fc2a 	bl	8000f60 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	@ 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e1ec      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	4b53      	ldr	r3, [pc, #332]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x10c>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d063      	beq.n	80017fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001736:	4b4c      	ldr	r3, [pc, #304]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001742:	4b49      	ldr	r3, [pc, #292]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b08      	cmp	r3, #8
 800174c:	d11c      	bne.n	8001788 <HAL_RCC_OscConfig+0x18c>
 800174e:	4b46      	ldr	r3, [pc, #280]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d116      	bne.n	8001788 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	4b43      	ldr	r3, [pc, #268]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x176>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e1c0      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4b3d      	ldr	r3, [pc, #244]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4939      	ldr	r1, [pc, #228]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	e03a      	b.n	80017fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001790:	4b36      	ldr	r3, [pc, #216]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff fbe3 	bl	8000f60 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff fbdf 	bl	8000f60 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1a1      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4927      	ldr	r1, [pc, #156]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e015      	b.n	80017fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d2:	4b26      	ldr	r3, [pc, #152]	@ (800186c <HAL_RCC_OscConfig+0x270>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fbc2 	bl	8000f60 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e0:	f7ff fbbe 	bl	8000f60 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e180      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d03a      	beq.n	8001880 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d019      	beq.n	8001846 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001812:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <HAL_RCC_OscConfig+0x274>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001818:	f7ff fba2 	bl	8000f60 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fb9e 	bl	8000f60 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e160      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_RCC_OscConfig+0x26c>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800183e:	2001      	movs	r0, #1
 8001840:	f000 face 	bl	8001de0 <RCC_Delay>
 8001844:	e01c      	b.n	8001880 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001846:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <HAL_RCC_OscConfig+0x274>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184c:	f7ff fb88 	bl	8000f60 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001852:	e00f      	b.n	8001874 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff fb84 	bl	8000f60 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d908      	bls.n	8001874 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e146      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	42420000 	.word	0x42420000
 8001870:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	4b92      	ldr	r3, [pc, #584]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e9      	bne.n	8001854 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80a6 	beq.w	80019da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b8b      	ldr	r3, [pc, #556]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10d      	bne.n	80018ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b88      	ldr	r3, [pc, #544]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a87      	ldr	r2, [pc, #540]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b85      	ldr	r3, [pc, #532]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b6:	2301      	movs	r3, #1
 80018b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ba:	4b82      	ldr	r3, [pc, #520]	@ (8001ac4 <HAL_RCC_OscConfig+0x4c8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d118      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac4 <HAL_RCC_OscConfig+0x4c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a7e      	ldr	r2, [pc, #504]	@ (8001ac4 <HAL_RCC_OscConfig+0x4c8>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d2:	f7ff fb45 	bl	8000f60 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018da:	f7ff fb41 	bl	8000f60 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b64      	cmp	r3, #100	@ 0x64
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e103      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	4b75      	ldr	r3, [pc, #468]	@ (8001ac4 <HAL_RCC_OscConfig+0x4c8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x312>
 8001900:	4b6f      	ldr	r3, [pc, #444]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a6e      	ldr	r2, [pc, #440]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6213      	str	r3, [r2, #32]
 800190c:	e02d      	b.n	800196a <HAL_RCC_OscConfig+0x36e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x334>
 8001916:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a69      	ldr	r2, [pc, #420]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	6213      	str	r3, [r2, #32]
 8001922:	4b67      	ldr	r3, [pc, #412]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a66      	ldr	r2, [pc, #408]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	6213      	str	r3, [r2, #32]
 800192e:	e01c      	b.n	800196a <HAL_RCC_OscConfig+0x36e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b05      	cmp	r3, #5
 8001936:	d10c      	bne.n	8001952 <HAL_RCC_OscConfig+0x356>
 8001938:	4b61      	ldr	r3, [pc, #388]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4a60      	ldr	r2, [pc, #384]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6213      	str	r3, [r2, #32]
 8001944:	4b5e      	ldr	r3, [pc, #376]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4a5d      	ldr	r2, [pc, #372]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6213      	str	r3, [r2, #32]
 8001950:	e00b      	b.n	800196a <HAL_RCC_OscConfig+0x36e>
 8001952:	4b5b      	ldr	r3, [pc, #364]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4a5a      	ldr	r2, [pc, #360]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6213      	str	r3, [r2, #32]
 800195e:	4b58      	ldr	r3, [pc, #352]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4a57      	ldr	r2, [pc, #348]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	f023 0304 	bic.w	r3, r3, #4
 8001968:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d015      	beq.n	800199e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff faf5 	bl	8000f60 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff faf1 	bl	8000f60 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e0b1      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001990:	4b4b      	ldr	r3, [pc, #300]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ee      	beq.n	800197a <HAL_RCC_OscConfig+0x37e>
 800199c:	e014      	b.n	80019c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7ff fadf 	bl	8000f60 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff fadb 	bl	8000f60 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e09b      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019bc:	4b40      	ldr	r3, [pc, #256]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1ee      	bne.n	80019a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d105      	bne.n	80019da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ce:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8087 	beq.w	8001af2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e4:	4b36      	ldr	r3, [pc, #216]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d061      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d146      	bne.n	8001a86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f8:	4b33      	ldr	r3, [pc, #204]	@ (8001ac8 <HAL_RCC_OscConfig+0x4cc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff faaf 	bl	8000f60 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff faab 	bl	8000f60 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e06d      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a18:	4b29      	ldr	r3, [pc, #164]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f0      	bne.n	8001a06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a2c:	d108      	bne.n	8001a40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	4921      	ldr	r1, [pc, #132]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a19      	ldr	r1, [r3, #32]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	430b      	orrs	r3, r1
 8001a52:	491b      	ldr	r1, [pc, #108]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_RCC_OscConfig+0x4cc>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fa7f 	bl	8000f60 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff fa7b 	bl	8000f60 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e03d      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x46a>
 8001a84:	e035      	b.n	8001af2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_RCC_OscConfig+0x4cc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fa68 	bl	8000f60 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff fa64 	bl	8000f60 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e026      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x498>
 8001ab2:	e01e      	b.n	8001af2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e019      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <HAL_RCC_OscConfig+0x500>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000

08001b00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0d0      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b14:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d910      	bls.n	8001b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b67      	ldr	r3, [pc, #412]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 0207 	bic.w	r2, r3, #7
 8001b2a:	4965      	ldr	r1, [pc, #404]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b63      	ldr	r3, [pc, #396]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0b8      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d020      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b5c:	4b59      	ldr	r3, [pc, #356]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4a58      	ldr	r2, [pc, #352]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b74:	4b53      	ldr	r3, [pc, #332]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4a52      	ldr	r2, [pc, #328]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b80:	4b50      	ldr	r3, [pc, #320]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	494d      	ldr	r1, [pc, #308]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d040      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	4b47      	ldr	r3, [pc, #284]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d115      	bne.n	8001bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e07f      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bbe:	4b41      	ldr	r3, [pc, #260]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e073      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bce:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e06b      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bde:	4b39      	ldr	r3, [pc, #228]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f023 0203 	bic.w	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4936      	ldr	r1, [pc, #216]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf0:	f7ff f9b6 	bl	8000f60 <HAL_GetTick>
 8001bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf8:	f7ff f9b2 	bl	8000f60 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e053      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 020c 	and.w	r2, r3, #12
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d1eb      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c20:	4b27      	ldr	r3, [pc, #156]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d210      	bcs.n	8001c50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 0207 	bic.w	r2, r3, #7
 8001c36:	4922      	ldr	r1, [pc, #136]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e032      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d008      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c5c:	4b19      	ldr	r3, [pc, #100]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4916      	ldr	r1, [pc, #88]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c7a:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	490e      	ldr	r1, [pc, #56]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c8e:	f000 f821 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8001c92:	4602      	mov	r2, r0
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	490a      	ldr	r1, [pc, #40]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca0:	5ccb      	ldrb	r3, [r1, r3]
 8001ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca6:	4a09      	ldr	r2, [pc, #36]	@ (8001ccc <HAL_RCC_ClockConfig+0x1cc>)
 8001ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f914 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	08002e4c 	.word	0x08002e4c
 8001ccc:	20000080 	.word	0x20000080
 8001cd0:	20000084 	.word	0x20000084

08001cd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cee:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d002      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x30>
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d003      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0x36>
 8001d02:	e027      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d04:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d06:	613b      	str	r3, [r7, #16]
      break;
 8001d08:	e027      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	0c9b      	lsrs	r3, r3, #18
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	4a17      	ldr	r2, [pc, #92]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d14:	5cd3      	ldrb	r3, [r2, r3]
 8001d16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d010      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	0c5b      	lsrs	r3, r3, #17
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	4a11      	ldr	r2, [pc, #68]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d36:	fb03 f202 	mul.w	r2, r3, r2
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e004      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a0c      	ldr	r2, [pc, #48]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d48:	fb02 f303 	mul.w	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	613b      	str	r3, [r7, #16]
      break;
 8001d52:	e002      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d56:	613b      	str	r3, [r7, #16]
      break;
 8001d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d5a:	693b      	ldr	r3, [r7, #16]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	007a1200 	.word	0x007a1200
 8001d70:	08002e64 	.word	0x08002e64
 8001d74:	08002e74 	.word	0x08002e74
 8001d78:	003d0900 	.word	0x003d0900

08001d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d80:	4b02      	ldr	r3, [pc, #8]	@ (8001d8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	20000080 	.word	0x20000080

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d94:	f7ff fff2 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4903      	ldr	r1, [pc, #12]	@ (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000
 8001db4:	08002e5c 	.word	0x08002e5c

08001db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dbc:	f7ff ffde 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	0adb      	lsrs	r3, r3, #11
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4903      	ldr	r1, [pc, #12]	@ (8001ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08002e5c 	.word	0x08002e5c

08001de0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001de8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <RCC_Delay+0x34>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <RCC_Delay+0x38>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0a5b      	lsrs	r3, r3, #9
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dfc:	bf00      	nop
  }
  while (Delay --);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1e5a      	subs	r2, r3, #1
 8001e02:	60fa      	str	r2, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f9      	bne.n	8001dfc <RCC_Delay+0x1c>
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000080 	.word	0x20000080
 8001e18:	10624dd3 	.word	0x10624dd3

08001e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e042      	b.n	8001eb4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe ff7e 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2224      	movs	r2, #36	@ 0x24
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fded 	bl	8002a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	@ 0x28
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d175      	bne.n	8001fc8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_UART_Transmit+0x2c>
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e06e      	b.n	8001fca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2221      	movs	r2, #33	@ 0x21
 8001ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001efa:	f7ff f831 	bl	8000f60 <HAL_GetTick>
 8001efe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	88fa      	ldrh	r2, [r7, #6]
 8001f04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	88fa      	ldrh	r2, [r7, #6]
 8001f0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f14:	d108      	bne.n	8001f28 <HAL_UART_Transmit+0x6c>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d104      	bne.n	8001f28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	e003      	b.n	8001f30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f30:	e02e      	b.n	8001f90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2180      	movs	r1, #128	@ 0x80
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fb52 	bl	80025e6 <UART_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e03a      	b.n	8001fca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10b      	bne.n	8001f72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	61bb      	str	r3, [r7, #24]
 8001f70:	e007      	b.n	8001f82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1cb      	bne.n	8001f32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2140      	movs	r1, #64	@ 0x40
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 fb1e 	bl	80025e6 <UART_WaitOnFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e006      	b.n	8001fca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
  }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3720      	adds	r7, #32
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b08c      	sub	sp, #48	@ 0x30
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d14a      	bne.n	8002082 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e043      	b.n	8002084 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	461a      	mov	r2, r3
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fb42 	bl	8002698 <UART_Start_Receive_IT>
 8002014:	4603      	mov	r3, r0
 8002016:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800201a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800201e:	2b00      	cmp	r3, #0
 8002020:	d12c      	bne.n	800207c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	2b01      	cmp	r3, #1
 8002028:	d125      	bne.n	8002076 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	330c      	adds	r3, #12
 8002046:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	e853 3f00 	ldrex	r3, [r3]
 800204e:	617b      	str	r3, [r7, #20]
   return(result);
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f043 0310 	orr.w	r3, r3, #16
 8002056:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	330c      	adds	r3, #12
 800205e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002060:	627a      	str	r2, [r7, #36]	@ 0x24
 8002062:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002064:	6a39      	ldr	r1, [r7, #32]
 8002066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002068:	e841 2300 	strex	r3, r2, [r1]
 800206c:	61fb      	str	r3, [r7, #28]
   return(result);
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e5      	bne.n	8002040 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8002074:	e002      	b.n	800207c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800207c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002080:	e000      	b.n	8002084 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002082:	2302      	movs	r3, #2
  }
}
 8002084:	4618      	mov	r0, r3
 8002086:	3730      	adds	r7, #48	@ 0x30
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0ba      	sub	sp, #232	@ 0xe8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80020ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10f      	bne.n	80020f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_UART_IRQHandler+0x66>
 80020de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fbea 	bl	80028c4 <UART_Receive_IT>
      return;
 80020f0:	e25b      	b.n	80025aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80de 	beq.w	80022b8 <HAL_UART_IRQHandler+0x22c>
 80020fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d106      	bne.n	8002116 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800210c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80d1 	beq.w	80022b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_UART_IRQHandler+0xae>
 8002122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800213a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <HAL_UART_IRQHandler+0xd2>
 8002146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	f043 0202 	orr.w	r2, r3, #2
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800215e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_UART_IRQHandler+0xf6>
 800216a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f043 0204 	orr.w	r2, r3, #4
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d011      	beq.n	80021b2 <HAL_UART_IRQHandler+0x126>
 800218e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800219a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	f043 0208 	orr.w	r2, r3, #8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 81f2 	beq.w	80025a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_UART_IRQHandler+0x14e>
 80021c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fb75 	bl	80028c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <HAL_UART_IRQHandler+0x17a>
 80021fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d04f      	beq.n	80022a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fa7f 	bl	800270a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d041      	beq.n	800229e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3314      	adds	r3, #20
 8002220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002228:	e853 3f00 	ldrex	r3, [r3]
 800222c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3314      	adds	r3, #20
 8002242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002246:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800224a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002256:	e841 2300 	strex	r3, r2, [r1]
 800225a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800225e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1d9      	bne.n	800221a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226a:	2b00      	cmp	r3, #0
 800226c:	d013      	beq.n	8002296 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002272:	4a7e      	ldr	r2, [pc, #504]	@ (800246c <HAL_UART_IRQHandler+0x3e0>)
 8002274:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe ffc2 	bl	8001204 <HAL_DMA_Abort_IT>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d016      	beq.n	80022b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002290:	4610      	mov	r0, r2
 8002292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002294:	e00e      	b.n	80022b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f99c 	bl	80025d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800229c:	e00a      	b.n	80022b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f998 	bl	80025d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a4:	e006      	b.n	80022b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f994 	bl	80025d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80022b2:	e175      	b.n	80025a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b4:	bf00      	nop
    return;
 80022b6:	e173      	b.n	80025a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	2b01      	cmp	r3, #1
 80022be:	f040 814f 	bne.w	8002560 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80022c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8148 	beq.w	8002560 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80022d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8141 	beq.w	8002560 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80b6 	beq.w	8002470 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002310:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8145 	beq.w	80025a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800231e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002322:	429a      	cmp	r2, r3
 8002324:	f080 813e 	bcs.w	80025a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800232e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b20      	cmp	r3, #32
 8002338:	f000 8088 	beq.w	800244c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	330c      	adds	r3, #12
 8002342:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002346:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800234a:	e853 3f00 	ldrex	r3, [r3]
 800234e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002352:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002356:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800235a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	330c      	adds	r3, #12
 8002364:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002368:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800236c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002370:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002374:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002378:	e841 2300 	strex	r3, r2, [r1]
 800237c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1d9      	bne.n	800233c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3314      	adds	r3, #20
 800238e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002390:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002392:	e853 3f00 	ldrex	r3, [r3]
 8002396:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002398:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800239a:	f023 0301 	bic.w	r3, r3, #1
 800239e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3314      	adds	r3, #20
 80023a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023ac:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80023b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80023b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80023b8:	e841 2300 	strex	r3, r2, [r1]
 80023bc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80023be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e1      	bne.n	8002388 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	3314      	adds	r3, #20
 80023ca:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023ce:	e853 3f00 	ldrex	r3, [r3]
 80023d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80023d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3314      	adds	r3, #20
 80023e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80023e8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80023ee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80023f0:	e841 2300 	strex	r3, r2, [r1]
 80023f4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80023f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e3      	bne.n	80023c4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	330c      	adds	r3, #12
 8002410:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002414:	e853 3f00 	ldrex	r3, [r3]
 8002418:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800241a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800241c:	f023 0310 	bic.w	r3, r3, #16
 8002420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	330c      	adds	r3, #12
 800242a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800242e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002430:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002432:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002434:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002436:	e841 2300 	strex	r3, r2, [r1]
 800243a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800243c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1e3      	bne.n	800240a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fea1 	bl	800118e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800245a:	b29b      	uxth	r3, r3
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	b29b      	uxth	r3, r3
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fd fe72 	bl	800014c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002468:	e09c      	b.n	80025a4 <HAL_UART_IRQHandler+0x518>
 800246a:	bf00      	nop
 800246c:	080027cf 	.word	0x080027cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002478:	b29b      	uxth	r3, r3
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 808e 	beq.w	80025a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800248c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8089 	beq.w	80025a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	330c      	adds	r3, #12
 800249c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a0:	e853 3f00 	ldrex	r3, [r3]
 80024a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80024a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	330c      	adds	r3, #12
 80024b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80024ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80024bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024c2:	e841 2300 	strex	r3, r2, [r1]
 80024c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80024c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1e3      	bne.n	8002496 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3314      	adds	r3, #20
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d8:	e853 3f00 	ldrex	r3, [r3]
 80024dc:	623b      	str	r3, [r7, #32]
   return(result);
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3314      	adds	r3, #20
 80024ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80024f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80024f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024fa:	e841 2300 	strex	r3, r2, [r1]
 80024fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1e3      	bne.n	80024ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	330c      	adds	r3, #12
 800251a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	e853 3f00 	ldrex	r3, [r3]
 8002522:	60fb      	str	r3, [r7, #12]
   return(result);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0310 	bic.w	r3, r3, #16
 800252a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	330c      	adds	r3, #12
 8002534:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002538:	61fa      	str	r2, [r7, #28]
 800253a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253c:	69b9      	ldr	r1, [r7, #24]
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	e841 2300 	strex	r3, r2, [r1]
 8002544:	617b      	str	r3, [r7, #20]
   return(result);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e3      	bne.n	8002514 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002552:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002556:	4619      	mov	r1, r3
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7fd fdf7 	bl	800014c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800255e:	e023      	b.n	80025a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <HAL_UART_IRQHandler+0x4f4>
 800256c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f93c 	bl	80027f6 <UART_Transmit_IT>
    return;
 800257e:	e014      	b.n	80025aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00e      	beq.n	80025aa <HAL_UART_IRQHandler+0x51e>
 800258c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f97b 	bl	8002894 <UART_EndTransmit_IT>
    return;
 800259e:	e004      	b.n	80025aa <HAL_UART_IRQHandler+0x51e>
    return;
 80025a0:	bf00      	nop
 80025a2:	e002      	b.n	80025aa <HAL_UART_IRQHandler+0x51e>
      return;
 80025a4:	bf00      	nop
 80025a6:	e000      	b.n	80025aa <HAL_UART_IRQHandler+0x51e>
      return;
 80025a8:	bf00      	nop
  }
}
 80025aa:	37e8      	adds	r7, #232	@ 0xe8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	4613      	mov	r3, r2
 80025f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025f6:	e03b      	b.n	8002670 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d037      	beq.n	8002670 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002600:	f7fe fcae 	bl	8000f60 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	6a3a      	ldr	r2, [r7, #32]
 800260c:	429a      	cmp	r2, r3
 800260e:	d302      	bcc.n	8002616 <UART_WaitOnFlagUntilTimeout+0x30>
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e03a      	b.n	8002690 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d023      	beq.n	8002670 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b80      	cmp	r3, #128	@ 0x80
 800262c:	d020      	beq.n	8002670 <UART_WaitOnFlagUntilTimeout+0x8a>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b40      	cmp	r3, #64	@ 0x40
 8002632:	d01d      	beq.n	8002670 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b08      	cmp	r3, #8
 8002640:	d116      	bne.n	8002670 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 f856 	bl	800270a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2208      	movs	r2, #8
 8002662:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e00f      	b.n	8002690 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	4013      	ands	r3, r2
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	429a      	cmp	r2, r3
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	429a      	cmp	r2, r3
 800268c:	d0b4      	beq.n	80025f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	88fa      	ldrh	r2, [r7, #6]
 80026b0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	88fa      	ldrh	r2, [r7, #6]
 80026b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2222      	movs	r2, #34	@ 0x22
 80026c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0220 	orr.w	r2, r2, #32
 80026fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800270a:	b480      	push	{r7}
 800270c:	b095      	sub	sp, #84	@ 0x54
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	330c      	adds	r3, #12
 8002718:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271c:	e853 3f00 	ldrex	r3, [r3]
 8002720:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002724:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	330c      	adds	r3, #12
 8002730:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002732:	643a      	str	r2, [r7, #64]	@ 0x40
 8002734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002736:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002738:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800273a:	e841 2300 	strex	r3, r2, [r1]
 800273e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1e5      	bne.n	8002712 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3314      	adds	r3, #20
 800274c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	e853 3f00 	ldrex	r3, [r3]
 8002754:	61fb      	str	r3, [r7, #28]
   return(result);
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3314      	adds	r3, #20
 8002764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002768:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800276c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800276e:	e841 2300 	strex	r3, r2, [r1]
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e5      	bne.n	8002746 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	2b01      	cmp	r3, #1
 8002780:	d119      	bne.n	80027b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	330c      	adds	r3, #12
 8002788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	e853 3f00 	ldrex	r3, [r3]
 8002790:	60bb      	str	r3, [r7, #8]
   return(result);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f023 0310 	bic.w	r3, r3, #16
 8002798:	647b      	str	r3, [r7, #68]	@ 0x44
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	330c      	adds	r3, #12
 80027a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027a2:	61ba      	str	r2, [r7, #24]
 80027a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a6:	6979      	ldr	r1, [r7, #20]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	e841 2300 	strex	r3, r2, [r1]
 80027ae:	613b      	str	r3, [r7, #16]
   return(result);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1e5      	bne.n	8002782 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027c4:	bf00      	nop
 80027c6:	3754      	adds	r7, #84	@ 0x54
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f7ff fef3 	bl	80025d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b21      	cmp	r3, #33	@ 0x21
 8002808:	d13e      	bne.n	8002888 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002812:	d114      	bne.n	800283e <UART_Transmit_IT+0x48>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d110      	bne.n	800283e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002830:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	1c9a      	adds	r2, r3, #2
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	621a      	str	r2, [r3, #32]
 800283c:	e008      	b.n	8002850 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	1c59      	adds	r1, r3, #1
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6211      	str	r1, [r2, #32]
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	4619      	mov	r1, r3
 800285e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10f      	bne.n	8002884 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002872:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002882:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e000      	b.n	800288a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff fe7b 	bl	80025b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	@ 0x30
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b22      	cmp	r3, #34	@ 0x22
 80028d6:	f040 80ae 	bne.w	8002a36 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028e2:	d117      	bne.n	8002914 <UART_Receive_IT+0x50>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d113      	bne.n	8002914 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002902:	b29a      	uxth	r2, r3
 8002904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002906:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	1c9a      	adds	r2, r3, #2
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	629a      	str	r2, [r3, #40]	@ 0x28
 8002912:	e026      	b.n	8002962 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002918:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800291a:	2300      	movs	r3, #0
 800291c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002926:	d007      	beq.n	8002938 <UART_Receive_IT+0x74>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <UART_Receive_IT+0x82>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	b2da      	uxtb	r2, r3
 8002940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e008      	b.n	8002958 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002952:	b2da      	uxtb	r2, r3
 8002954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002956:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29b      	uxth	r3, r3
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	4619      	mov	r1, r3
 8002970:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002972:	2b00      	cmp	r3, #0
 8002974:	d15d      	bne.n	8002a32 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0220 	bic.w	r2, r2, #32
 8002984:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002994:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d135      	bne.n	8002a28 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	330c      	adds	r3, #12
 80029c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	e853 3f00 	ldrex	r3, [r3]
 80029d0:	613b      	str	r3, [r7, #16]
   return(result);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f023 0310 	bic.w	r3, r3, #16
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	330c      	adds	r3, #12
 80029e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e2:	623a      	str	r2, [r7, #32]
 80029e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e6:	69f9      	ldr	r1, [r7, #28]
 80029e8:	6a3a      	ldr	r2, [r7, #32]
 80029ea:	e841 2300 	strex	r3, r2, [r1]
 80029ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1e5      	bne.n	80029c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d10a      	bne.n	8002a1a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fd fb93 	bl	800014c <HAL_UARTEx_RxEventCallback>
 8002a26:	e002      	b.n	8002a2e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff fdca 	bl	80025c2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e002      	b.n	8002a38 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3730      	adds	r7, #48	@ 0x30
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a7a:	f023 030c 	bic.w	r3, r3, #12
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b54 <UART_SetConfig+0x114>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d103      	bne.n	8002ab0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002aa8:	f7ff f986 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	e002      	b.n	8002ab6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ab0:	f7ff f96e 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8002ab4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	009a      	lsls	r2, r3, #2
 8002ac0:	441a      	add	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	4a22      	ldr	r2, [pc, #136]	@ (8002b58 <UART_SetConfig+0x118>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	0119      	lsls	r1, r3, #4
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	009a      	lsls	r2, r3, #2
 8002ae0:	441a      	add	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aec:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <UART_SetConfig+0x118>)
 8002aee:	fba3 0302 	umull	r0, r3, r3, r2
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2064      	movs	r0, #100	@ 0x64
 8002af6:	fb00 f303 	mul.w	r3, r0, r3
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	3332      	adds	r3, #50	@ 0x32
 8002b00:	4a15      	ldr	r2, [pc, #84]	@ (8002b58 <UART_SetConfig+0x118>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b0c:	4419      	add	r1, r3
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	009a      	lsls	r2, r3, #2
 8002b18:	441a      	add	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b24:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <UART_SetConfig+0x118>)
 8002b26:	fba3 0302 	umull	r0, r3, r3, r2
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	2064      	movs	r0, #100	@ 0x64
 8002b2e:	fb00 f303 	mul.w	r3, r0, r3
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	3332      	adds	r3, #50	@ 0x32
 8002b38:	4a07      	ldr	r2, [pc, #28]	@ (8002b58 <UART_SetConfig+0x118>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	440a      	add	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40013800 	.word	0x40013800
 8002b58:	51eb851f 	.word	0x51eb851f

08002b5c <memset>:
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4402      	add	r2, r0
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d100      	bne.n	8002b66 <memset+0xa>
 8002b64:	4770      	bx	lr
 8002b66:	f803 1b01 	strb.w	r1, [r3], #1
 8002b6a:	e7f9      	b.n	8002b60 <memset+0x4>

08002b6c <__libc_init_array>:
 8002b6c:	b570      	push	{r4, r5, r6, lr}
 8002b6e:	2600      	movs	r6, #0
 8002b70:	4d0c      	ldr	r5, [pc, #48]	@ (8002ba4 <__libc_init_array+0x38>)
 8002b72:	4c0d      	ldr	r4, [pc, #52]	@ (8002ba8 <__libc_init_array+0x3c>)
 8002b74:	1b64      	subs	r4, r4, r5
 8002b76:	10a4      	asrs	r4, r4, #2
 8002b78:	42a6      	cmp	r6, r4
 8002b7a:	d109      	bne.n	8002b90 <__libc_init_array+0x24>
 8002b7c:	f000 f81a 	bl	8002bb4 <_init>
 8002b80:	2600      	movs	r6, #0
 8002b82:	4d0a      	ldr	r5, [pc, #40]	@ (8002bac <__libc_init_array+0x40>)
 8002b84:	4c0a      	ldr	r4, [pc, #40]	@ (8002bb0 <__libc_init_array+0x44>)
 8002b86:	1b64      	subs	r4, r4, r5
 8002b88:	10a4      	asrs	r4, r4, #2
 8002b8a:	42a6      	cmp	r6, r4
 8002b8c:	d105      	bne.n	8002b9a <__libc_init_array+0x2e>
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
 8002b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b94:	4798      	blx	r3
 8002b96:	3601      	adds	r6, #1
 8002b98:	e7ee      	b.n	8002b78 <__libc_init_array+0xc>
 8002b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b9e:	4798      	blx	r3
 8002ba0:	3601      	adds	r6, #1
 8002ba2:	e7f2      	b.n	8002b8a <__libc_init_array+0x1e>
 8002ba4:	08002e78 	.word	0x08002e78
 8002ba8:	08002e78 	.word	0x08002e78
 8002bac:	08002e78 	.word	0x08002e78
 8002bb0:	08002e7c 	.word	0x08002e7c

08002bb4 <_init>:
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb6:	bf00      	nop
 8002bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bba:	bc08      	pop	{r3}
 8002bbc:	469e      	mov	lr, r3
 8002bbe:	4770      	bx	lr

08002bc0 <_fini>:
 8002bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc2:	bf00      	nop
 8002bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc6:	bc08      	pop	{r3}
 8002bc8:	469e      	mov	lr, r3
 8002bca:	4770      	bx	lr
